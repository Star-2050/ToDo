// Definition des jQuery-Plugins "scrolly"
(function ($) {
    // Funktion zur Berechnung der Scrollposition
    function calculateScrollPosition(target, options) {
        var targetElement, offset, position;

        // Überprüfe, ob das Ziel-Element existiert
        if ((targetElement = $(target))[0][t] === 0) return null;

        // Berechne die Scrollposition basierend auf dem Ankerpunkt
        offset = targetElement[i]()[r];
        switch (options.anchor) {
            case "middle":
                position = offset - (e(window).height() - targetElement.outerHeight()) / 2;
                break;
            default:
            case r:
                position = Math.max(offset, 0);
        }

        // Berücksichtige den Offset-Wert und die benutzerdefinierte Funktion (falls vorhanden)
        return typeof options[i] === "function" ? position -= options[i]() : position -= options[i], position;
    }

    // Konstanten und Initialisierung
    var t = "length",
        n = null,
        r = "top",
        i = "offset",
        s = "click.scrolly",
        o = $(window);

    // jQuery-Plugin-Definition für "scrolly"
    $.fn.scrolly = function (options) {
        var self = this;

        // Überprüfe, ob das jQuery-Objekt leer ist
        if (this[t] === 0) return self;

        // Falls mehrere Elemente ausgewählt wurden, rufe die Funktion für jedes Element auf
        if (this[t] > 1) {
            for (var i = 0; i < this[t]; i++) {
                $(this[i]).scrolly(options);
            }
            return self;
        }

        var lastScrollPosition = n,
            href = n,
            targetElement = $(self);

        // Überprüfe, ob das ausgewählte Element ein gültiges Anker-Element ist
        if (self[t] === 0 || (href = jQuery.extend({ anchor: r, easing: "swing", offset: 0, parent: $("body,html"), pollOnce: false, speed: 1000 }, options)).pollOnce && (lastScrollPosition = calculateScrollPosition(href.anchor, href)) === n) {
            return self;
        }

        // Event-Handler für das Klicken auf das Element
        targetElement.off(s).on(s, function (event) {
            var scrollPosition = lastScrollPosition !== n ? lastScrollPosition : calculateScrollPosition(href.anchor, href);

            // Falls die Scrollposition vorhanden ist, verhindere den Standard-Link-Klick und animiere das Scrollen
            if (scrollPosition !== n) {
                event.preventDefault();
                href.parent.stop().animate({ scrollTop: scrollPosition }, href.speed, href.easing);
            }
        });

        return self;
    };
})(jQuery);
