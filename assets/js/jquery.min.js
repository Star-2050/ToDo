/*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */
/**
* Wraps an event's document in a module that is used to ensure that jQuery doesn't accidentally leak DOM nodes.

*/

! function(e, t) {
    "use strict";

    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e)
    } : t(e)
}("undefined" != typeof window ? window : this, function(C, e) {
    "use strict";
    var t = [],
        r = Object.getPrototypeOf,
        s = t.slice,
        g = t.flat ? function(e) {
            return t.flat.call(e)
        } : function(e) {
            return t.concat.apply([], e)
        },
        u = t.push,
        i = t.indexOf,
        n = {},
        o = n.toString,
        v = n.hasOwnProperty,
        a = v.toString,
        l = a.call(Object),
        y = {},
        m = function(e) {
            return "function" == typeof e && "number" != typeof e.nodeType && "function" != typeof e.item
        },
        x = function(e) {
            return null != e && e === e.window
        },
        E = C.document,
        c = {
            type: !0,
            src: !0,
            nonce: !0,
            noModule: !0
        };


    /**
     * Adds or replaces script tags.
     * 
     * @param e - The text to be added or replaced.
     * @param t - The attributes to be applied to the script tag.
     * @param n - The document to be modified
     */

    function b(e, t, n) {
        var r, i, o = (n = n || E)
            .createElement("script");
        if (o.text = e, t)
            for (r in c)(i = t[r] || t.getAttribute && t.getAttribute(r)) && o.setAttribute(r, i);
        n.head.appendChild(o)
            .parentNode.removeChild(o)
    }


    /**
     * Returns the type of the given value.
     * 
     * @param e - The value to check.
     * 
     * @return The type of the given value
     */

    function w(e) {
        return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? n[o.call(e)] || "object" : typeof e
    }
    var f = "3.6.0",

        /**
         * @param e - t Th expiration time in milliseconds.
         * @param t
         * 
         * @return A promise that will resolve to the specified value
         */

        S = function(e, t) {
            return new S.fn.init(e, t)
        };


    /**
     * Checks if ` e ` is a non - null object.
     * 
     * @param e - The object to check.
     * 
     * @return { boolean } ` true ` if the object is non - null
     */
    function p(e) {
        var t = !!e && "length" in e && e.length,
            n = w(e);
        return !m(e) && !x(e) && ("array" === n || 0 === t || "number" == typeof t && 0 < t && t - 1 in e)
    }

    S.fn = S.prototype = {
        jquery: f,
        constructor: S,
        length: 0,

        /**
         * @return { Object } An instance of this
         */
        toArray: function() {
            return s.call(this)
        },

        /**
         * @param e
         * 
         * @return The value at the
         */

        get: function(e) {
            return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e]
        },
        /**
         * @param e
         * 
         * @return { Object } A new instance of the same type
         */
        pushStack: function(e) {
            var t = S.merge(this.constructor(), e);
            return t.prevObject = this, t
        },
        /**
         * @param e
         * 
         * @return { Array } An array of elements
         */
        each: function(e) {
            return S.each(this, e)
        },
        /**
         * Applies a function to each element in the array and returns a new array.
         * 
         * @param n - The function to apply to each element.
         * 
         * @return { Array } The array with the results of the function applied
         */
        map: function(n) {
            /**
             * @param e - t Th key to set.
             * @param t
             * 
             * @return { Object } The value that was set
             */
            return this.pushStack(S.map(this, function(e, t) {
                return n.call(e, t, e)
            }))
        },
        /**
         * @return { Object } A reference to the ` this `
         */
        slice: function() {
            return this.pushStack(s.apply(this, arguments))
        },
        /**
         * @return { Query } A reference to this
         */
        first: function() {
            return this.eq(0)
        },
        /**
         * @return { Query } - Returns a Query
         */
        last: function() {
            return this.eq(-1)
        },
        /**
         * Searches for elements and pushes them onto the stack.
         * 
         * 
         * @return { Array } The array
         */
        even: function() {
            /**
             * @param e - t Th index of the key.
             * @param t
             * 
             * @return { boolean } ` true ` if the key is odd
             */
            return this.pushStack(S.grep(this, function(e, t) {
                return (t + 1) % 2
            }))
        },
        /**
         * Searches for odd numbers in the array and pushes them onto the stack.
         * 
         * 
         * @return { Array } The array
         */
        odd: function() {
            /**
             * @param e - t Th index of the key.
             * @param t
             * 
             * @return { boolean } True if the key is odd
             */
            return this.pushStack(S.grep(this, function(e, t) {
                return t % 2
            }))
        },
        /**
         * @param e
         * 
         * @return { Array } An array of items
         */
        eq: function(e) {
            var t = this.length,
                n = +e + (e < 0 ? t : 0);
            return this.pushStack(0 <= n && n < t ? [this[n]] : [])
        },
        /**
         * @return { Object } An object representing the same object
         */
        end: function() {
            return this.prevObject || this.constructor()
        },
        push: u,
        sort: t.sort,
        splice: t.splice
        /**
         * @return { Object } The object
         */
    }, S.extend = S.fn.extend = function() {
        var e, t, n, r, i, o, a = arguments[0] || {},
            s = 1,
            u = arguments.length,
            l = !1;
        for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || m(a) || (a = {}), s === u && (a = this, s--); s < u; s++)
            if (null != (e = arguments[s]))
                for (t in e) r = e[t], "__proto__" !== t && a !== r && (l && r && (S.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[t], o = i && !Array.isArray(n) ? [] : i || S.isPlainObject(n) ? n : {}, i = !1, a[t] = S.extend(l, o, r)) : void 0 !== r && (a[t] = r));
        return a
    }, S.extend({
        expando: "jQuery" + (f + Math.random())
            .replace(/\D/g, ""),
        isReady: !0,
        /**
         * @param e
         */
        error: function(e) {
            throw new Error(e)
        },
        /**
         * / / object
         */
        noop: function() {},
        /**
         * Checks whether the given value is a valid object.
         * 
         * @param e - The value to check.
         * 
         * @return { boolean } Whether the given value is
         */
        isPlainObject: function(e) {
            var t, n;
            return !(!e || "[object Object]" !== o.call(e)) && (!(t = r(e)) || "function" == typeof(n = v.call(t, "constructor") && t.constructor) && a.call(n) === l)
        },
        /**
         * @param e
         * 
         * @return { boolean } ` true ` if ` e ` contains at least one property
         */
        isEmptyObject: function(e) {
            var t;
            for (t in e) return !1;
            return !0
        },
        /**
         * @param e - t Th nonce if any.
         * @param t - n The session ID o use
         * @param n
         */
        globalEval: function(e, t, n) {
            b(e, {
                nonce: t && t.nonce
            }, n)
        },
        /**
         * @param e - t Th predicate to use.
         * @param t
         * 
         * @return { Object } The object
         */
        each: function(e, t) {
            var n, r = 0;
            if (p(e)) {
                for (n = e.length; r < n; r++)
                    if (!1 === t.call(e[r], r, e[r])) break
            } else
                for (r in e)
                    if (!1 === t.call(e[r], r, e[r])) break;
            return e
        },
        /**
         * @param e - t Th target that will be used to merge the object into.
         * @param t
         * 
         * @return The merged object and target
         */
        makeArray: function(e, t) {
            var n = t || [];
            return null != e && (p(Object(e)) ? S.merge(n, "string" == typeof e ? [e] : e) : u.call(n, e)), n
        },
        /**
         * @param e - t Th value to compare.
         * @param t - n The opions to use when comparing.
         * @param n
         * 
         * @return The result of the comparison
         */
        inArray: function(e, t, n) {
            return null == t ? -1 : i.call(t, e, n)
        },
        /**
         * @param e - t Th items to copy.
         * @param t
         * 
         * @return { Buffer } The buffer with the items copied
         */
        merge: function(e, t) {
            for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r];
            return e.length = i, e
        },
        /**
         * @param e - t Th predicate to use for filtering the array.
         * @param t - n Wheher to include the index in the filtered array.
         * @param n
         * 
         * @return { Array } The filtered array
         */
        grep: function(e, t, n) {
            for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) !t(e[i], i) !== a && r.push(e[i]);
            return r
        },
        /**
         * @param e - t Callback to dtermine if an object should be included in the result.
         * @param t - n A flag o indicate recursion.
         * @param n
         * 
         * @return { Array } An array of objects
         */
        map: function(e, t, n) {
            var r, i, o = 0,
                a = [];
            if (p(e))
                for (r = e.length; o < r; o++) null != (i = t(e[o], o, n)) && a.push(i);
            else
                for (o in e) null != (i = t(e[o], o, n)) && a.push(i);
            return g(a)
        },
        guid: 1,
        support: y
        /**
         * @param e - t Th name of the property
         * @param t
         */
    }), "function" == typeof Symbol && (S.fn[Symbol.iterator] = t[Symbol.iterator]), S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
        n["[object " + t + "]"] = t.toLowerCase()
    });




    var d = function(n) {
        var e, d, b, o, i, h, f, g, w, u, l, T, C, a, E, v, s, c, y, S = "sizzle" + 1 * new Date,
            p = n.document,
            k = 0,
            r = 0,
            m = ue(),
            x = ue(),
            A = ue(),
            N = ue(),
            /**
             * @param e - t Th value to compare against.
             * @param t
             * 
             * @return { boolean } True if and only if the values are equal
             */
            j = function(e, t) {
                return e === t && (l = !0), 0
            },
            D = {}.hasOwnProperty,
            t = [],
            q = t.pop,
            L = t.push,
            H = t.push,
            O = t.slice,
            /**
             * @param e - t String to sarch for.
             * @param t
             * 
             * @return Index of the match or - 1 if not found
             */
            P = function(e, t) {
                for (var n = 0, r = e.length; n < r; n++)
                    if (e[n] === t) return n;
                return -1
            },
            R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            M = "[\\x20\\t\\r\\n\\f]",
            I = "(?:\\\\[\\da-fA-F]{1,6}" + M + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
            W = "\\[" + M + "*(" + I + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + I + "))|)" + M + "*\\]",
            F = ":(" + I + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + W + ")*)|.*)\\)|)",
            B = new RegExp(M + "+", "g"),
            $ = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
            _ = new RegExp("^" + M + "*," + M + "*"),
            z = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
            U = new RegExp(M + "|>"),
            X = new RegExp(F),
            V = new RegExp("^" + I + "$"),
            G = {
                ID: new RegExp("^#(" + I + ")"),
                CLASS: new RegExp("^\\.(" + I + ")"),
                TAG: new RegExp("^(" + I + "|[*])"),
                ATTR: new RegExp("^" + W),
                PSEUDO: new RegExp("^" + F),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + R + ")$", "i"),
                needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
            },
            Y = /HTML$/i,
            Q = /^(?:input|select|textarea|button)$/i,
            J = /^h\d$/i,
            K = /^[^{]+\{\s*\[native \w/,
            Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            ee = /[+~]/,
            te = new RegExp("\\\\[\\da-fA-F]{1,6}" + M + "?|\\\\([^\\r\\n\\f])", "g"),
            /**
             * @param e - t If tru return base - 10 code point.
             * @param t
             * 
             * @return { String } Encoded string
             */
            ne = function(e, t) {
                var n = "0x" + e.slice(1) - 65536;
                return t || (n < 0 ? String.fromCharCode(n + 65536) : String.fromCharCode(n >> 10 | 55296, 1023 & n | 56320))
            },
            re = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
            /**
             * @param e - t Whther or not to escape the null character.
             * @param t
             * 
             * @return { string } The escaped value
             */
            ie = function(e, t) {
                return t ? "\0" === e ? "\ufffd" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1)
                    .toString(16) + " " : "\\" + e
            },
            /**
             * / / object
             */
            oe = function() {
                T()
            },
            /**
             * @param e
             * 
             * @return True if the element is a fieldset
             */
            ae = be(function(e) {
                return !0 === e.disabled && "fieldset" === e.nodeName.toLowerCase()
            }, {
                dir: "parentNode",
                next: "legend"
            });
        try {
            H.apply(t = O.call(p.childNodes), p.childNodes), t[p.childNodes.length].nodeType
        } catch (e) {
            H = {
                /**
                 * @param e - t Th values to set
                 * @param t
                 */
                apply: t.length ? function(e, t) {
                    L.apply(e, O.call(t))
                    /**
                     * @param e - t Th data to copy
                     * @param t
                     */
                } : function(e, t) {
                    var n = e.length,
                        r = 0;
                    while (e[n++] = t[r++]);
                    e.length = n - 1
                }
            }
        }

        /**
         * Gets all elements matching the given selector.
         * 
         * @param t - The selector to match.
         * @param e - The element to get elements from.
         * @param n - The array to fill with found elements.
         * @param r - Whether to search the document for elements.
         * 
         * @return The array of matched elements
         */
        function se(t, e, n, r) {
            var i, o, a, s, u, l, c, f = e && e.ownerDocument,
                p = e ? e.nodeType : 9;
            if (n = n || [], "string" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p) return n;
            if (!r && (T(e), e = e || C, E)) {
                if (11 !== p && (u = Z.exec(t)))
                    if (i = u[1]) {
                        if (9 === p) {
                            if (!(a = e.getElementById(i))) return n;
                            if (a.id === i) return n.push(a), n
                        } else if (f && (a = f.getElementById(i)) && y(e, a) && a.id === i) return n.push(a), n
                    } else {
                        if (u[2]) return H.apply(n, e.getElementsByTagName(t)), n;
                        if ((i = u[3]) && d.getElementsByClassName && e.getElementsByClassName) return H.apply(n, e.getElementsByClassName(i)), n
                    } if (d.qsa && !N[t + " "] && (!v || !v.test(t)) && (1 !== p || "object" !== e.nodeName.toLowerCase())) {
                    if (c = t, f = e, 1 === p && (U.test(t) || z.test(t))) {
                        (f = ee.test(t) && ye(e.parentNode) || e) === e && d.scope || ((s = e.getAttribute("id")) ? s = s.replace(re, ie) : e.setAttribute("id", s = S)), o = (l = h(t))
                            .length;
                        while (o--) l[o] = (s ? "#" + s : ":scope") + " " + xe(l[o]);
                        c = l.join(",")
                    }
                    try {
                        return H.apply(n, f.querySelectorAll(c)), n
                    } catch (e) {
                        N(t, !0)
                    } finally {
                        s === S && e.removeAttribute("id")
                    }
                }
            }
            return g(t.replace($, "$1"), e, n, r)
        }

        /**
         * Creates a function that will cache entries that exceed b. cacheLength.
         * 
         * 
         * @return { Function } The function
         */
        function ue() {
            var r = [];
            /**
             * Stores a value in the cache.
             * 
             * @param t - The key to store the value under.
             * @param n - The value to store.
             * 
             * @return True if the value was stored
             */
            return function e(t, n) {
                return r.push(t + " ") > b.cacheLength && delete e[r.shift()], e[t + " "] = n
            }
        }

        /**
         * Marks an event as dirty.
         * 
         * @param e - The event to mark dirty.
         * 
         * @return { Object } The event
         */
        function le(e) {
            return e[S] = !0, e
        }

        /**
         * Checks whether or not the given value is valid.
         * 
         * @param e - The value to check.
         * 
         * @return { boolean } True if the value is valid
         */
        function ce(e) {
            var t = C.createElement("fieldset");
            try {
                return !!e(t)
            } catch (e) {
                return !1
            } finally {
                t.parentNode && t.parentNode.removeChild(t), t = null
            }
        }

        /**
         * Sets the value of one or more attributes.
         * 
         * @param e - The attribute name to set.
         * @param t - The value to set
         */
        function fe(e, t) {
            var n = e.split("|"),
                r = n.length;
            while (r--) b.attrHandle[n[r]] = t
        }

        /**
         * Compares two nodes for order.
         * 
         * @param e - The first node to compare.
         * @param t - The second node to compare.
         * 
         * @return { number } Comparison result
         */
        function pe(e, t) {
            var n = t && e,
                r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (r) return r;
            if (n)
                while (n = n.nextSibling)
                    if (n === t) return -1;
            return e ? 1 : -1
        }

        /**
         * Returns a function that matches elements with the given type.
         * 
         * @param t - The type to match.
         * 
         * @return { Function } A function that matches elements with the given type
         */
        function de(t) {
            /**
             * @param e
             * 
             * @return { boolean } True if the element is an input
             */
            return function(e) {
                return "input" === e.nodeName.toLowerCase() && e.type === t
            }
        }

        /**
         * Creates a function that matches elements with the given type.
         * 
         * @param n - The type to match.
         * 
         * @return { Function } The new match function
         */
        function he(n) {
            /**
             * @param e
             * 
             * @return True if the event is an input or button
             */
            return function(e) {
                var t = e.nodeName.toLowerCase();
                return ("input" === t || "button" === t) && e.type === n
            }
        }

        /**
         * Returns a function which can be used with $. when so that the event is disabled or not.
         * 
         * @param t - The value to check.
         * 
         * @return { Function } The function to use
         */
        function ge(t) {
            /**
             * @param e
             * 
             * @return True if the element is disabled
             */
            return function(e) {
                return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : "label" in e && e.disabled === t
            }
        }

        /**
         * Creates a filter that passes when applying a set of filters to a set of documents.
         * 
         * @param a - function which takes an array of documents and a filter as arguments and returns an array of filter results.
         * 
         * @return { Filter } a filter that passes when applying the set of filters to a document
         */
        function ve(a) {
            /**
             * Applies the given set of filters to the given target so that only results matching the filter are returned.
             * 
             * @param o - The set of filters to apply.
             * 
             * @return { Array } Returns the new filtered array
             */
            return le(function(o) {
                /**
                 * @param e - t Th target for the change
                 * @param t
                 */
                return o = +o, le(function(e, t) {
                    var n, r = a([], e.length, o),
                        i = r.length;
                    while (i--) e[n = r[i]] && (e[n] = !(t[n] = e[n]))
                })
            })
        }

        /**
         * Checks if an element is a DOM element
         * 
         * @param e - Element to check if it's a DOM element
         * 
         * @return { Element|Boolean } Returns the element if it's a DOM
         */
        function ye(e) {
            return e && "undefined" != typeof e.getElementsByTagName && e
        }

        /**
         * @param e
         * 
         * @return True if the element is a document node
         */
        for (e in d = se.support = {}, i = se.isXML = function(e) {
                var t = e && e.namespaceURI,
                    n = e && (e.ownerDocument || e)
                    .documentElement;
                return !Y.test(t || n && n.nodeName || "HTML")
            }, T = se.setDocument = function(e) {
                var t, n, r = e ? e.ownerDocument || e : p;
                /**
                 * @param e
                 * 
                 * @return { Element } The newly created
                 */
                return r != C && 9 === r.nodeType && r.documentElement && (a = (C = r)
                    .documentElement, E = !i(C), p != C && (n = C.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener("unload", oe, !1) : n.attachEvent && n.attachEvent("onunload", oe)), d.scope = ce(function(e) {
                        return a.appendChild(e)
                            .appendChild(C.createElement("div")), "undefined" != typeof e.querySelectorAll && !e.querySelectorAll(":scope fieldset div")
                            .length
                        /**
                         * @param e
                         * 
                         * @return { Element } The original
                         */
                    }), d.attributes = ce(function(e) {
                        return e.className = "i", !e.getAttribute("className")
                        /**
                         * @param e
                         * 
                         * @return { Element } The newly created
                         */
                    }), d.getElementsByTagName = ce(function(e) {
                        return e.appendChild(C.createComment("")), !e.getElementsByTagName("*")
                            .length
                        /**
                         * @param e
                         * 
                         * @return { Element } The newly created element
                         */
                    }), d.getElementsByClassName = K.test(C.getElementsByClassName), d.getById = ce(function(e) {
                        return a.appendChild(e)
                            .id = S, !C.getElementsByName || !C.getElementsByName(S)
                            .length
                        /**
                         * Returns a function that matches elements based on the id attribute.
                         * 
                         * @param e - The element to match.
                         * 
                         * @return { Function } The match function
                         */
                    }), d.getById ? (b.filter.ID = function(e) {
                        var t = e.replace(te, ne);
                        /**
                         * @param e
                         * 
                         * @return { boolean } True if the element has an id
                         */
                        return function(e) {
                            return e.getAttribute("id") === t
                        }
                        /**
                         * @param e - t documnt to search in
                         * @param t
                         * 
                         * @return array of elements or
                         */
                    }, b.find.ID = function(e, t) {
                        if ("undefined" != typeof t.getElementById && E) {
                            var n = t.getElementById(e);
                            return n ? [n] : []
                        }
                        /**
                         * Returns a function that checks if an element is a text node.
                         * 
                         * @param e - The element to check.
                         * 
                         * @return { Function } A function that checks if the element is a text node
                         */
                    }) : (b.filter.ID = function(e) {
                        var n = e.replace(te, ne);
                        /**
                         * @param e
                         * 
                         * @return True if the element has an id
                         */
                        return function(e) {
                            var t = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");
                            return t && t.value === n
                        }
                        /**
                         * @param e - t documnt to search in
                         * @param t
                         * 
                         * @return array of DOM elements matching
                         */
                    }, b.find.ID = function(e, t) {
                        if ("undefined" != typeof t.getElementById && E) {
                            var n, r, i, o = t.getElementById(e);
                            if (o) {
                                if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
                                i = t.getElementsByName(e), r = 0;
                                while (o = i[r++])
                                    if ((n = o.getAttributeNode("id")) && n.value === e) return [o]
                            }
                            return []
                        }
                        /**
                         * @param e - t Documnt to search in.
                         * @param t
                         * 
                         * @return Array of elements or null
                         */
                    }), b.find.TAG = d.getElementsByTagName ? function(e, t) {
                        return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : d.qsa ? t.querySelectorAll(e) : void 0
                        /**
                         * @param e - t Elment to search in.
                         * @param t
                         * 
                         * @return Array of nodes matching the selector
                         */
                    } : function(e, t) {
                        var n, r = [],
                            i = 0,
                            o = t.getElementsByTagName(e);
                        if ("*" === e) {
                            while (n = o[i++]) 1 === n.nodeType && r.push(n);
                            return r
                        }
                        return o
                        /**
                         * @param e - t DOM objct to search in
                         * @param t
                         * 
                         * @return { HTMLElement [] } DOM
                         */
                    }, b.find.CLASS = d.getElementsByClassName && function(e, t) {
                        if ("undefined" != typeof t.getElementsByClassName && E) return t.getElementsByClassName(e)
                        /**
                         * @param e
                         */
                    }, s = [], v = [], (d.qsa = K.test(C.querySelectorAll)) && (ce(function(e) {
                        var t;
                        a.appendChild(e)
                            .innerHTML = "<a id='" + S + "'></a><select id='" + S + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']")
                            .length && v.push("[*^$]=" + M + "*(?:''|\"\")"), e.querySelectorAll("[selected]")
                            .length || v.push("\\[" + M + "*(?:value|" + R + ")"), e.querySelectorAll("[id~=" + S + "-]")
                            .length || v.push("~="), (t = C.createElement("input"))
                            .setAttribute("name", ""), e.appendChild(t), e.querySelectorAll("[name='']")
                            .length || v.push("\\[" + M + "*name" + M + "*=" + M + "*(?:''|\"\")"), e.querySelectorAll(":checked")
                            .length || v.push(":checked"), e.querySelectorAll("a#" + S + "+*")
                            .length || v.push(".#.+[+~]"), e.querySelectorAll("\\\f"), v.push("[\\r\\n\\f]")
                        /**
                         * @param e
                         */
                    }), ce(function(e) {
                        e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                        var t = C.createElement("input");
                        t.setAttribute("type", "hidden"), e.appendChild(t)
                            .setAttribute("name", "D"), e.querySelectorAll("[name=d]")
                            .length && v.push("name" + M + "*[*^$|!~]?="), 2 !== e.querySelectorAll(":enabled")
                            .length && v.push(":enabled", ":disabled"), a.appendChild(e)
                            .disabled = !0, 2 !== e.querySelectorAll(":disabled")
                            .length && v.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), v.push(",.*:")
                        /**
                         * @param e
                         */
                    })), (d.matchesSelector = K.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function(e) {
                        d.disconnectedMatch = c.call(e, "*"), c.call(e, "[s!='']:x"), s.push("!=", F)
                        /**
                         * @param e - t Th element to check against.
                         * @param t
                         * 
                         * @return True if the element is equal to or contains the element
                         */
                    }), v = v.length && new RegExp(v.join("|")), s = s.length && new RegExp(s.join("|")), t = K.test(a.compareDocumentPosition), y = t || K.test(a.contains) ? function(e, t) {
                        var n = 9 === e.nodeType ? e.documentElement : e,
                            r = t && t.parentNode;
                        return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)))
                        /**
                         * @param e - t Optional parnt to check against.
                         * @param t
                         * 
                         * @return True if element is found
                         */
                    } : function(e, t) {
                        if (t)
                            while (t = t.parentNode)
                                if (t === e) return !0;
                        return !1
                        /**
                         * @param e - t Th second document to compare.
                         * @param t
                         * 
                         * @return { number } The result of the compare
                         */
                    }, j = t ? function(e, t) {
                        if (e === t) return l = !0, 0;
                        var n = !e.compareDocumentPosition - !t.compareDocumentPosition;
                        return n || (1 & (n = (e.ownerDocument || e) == (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !d.sortDetached && t.compareDocumentPosition(e) === n ? e == C || e.ownerDocument == p && y(p, e) ? -1 : t == C || t.ownerDocument == p && y(p, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & n ? -1 : 1)
                        /**
                         * @param e - t Th node to compare.
                         * @param t
                         * 
                         * @return 1 0 or 1 depending on whether e precedes or follows t
                         */
                    } : function(e, t) {
                        if (e === t) return l = !0, 0;
                        var n, r = 0,
                            i = e.parentNode,
                            o = t.parentNode,
                            a = [e],
                            s = [t];
                        if (!i || !o) return e == C ? -1 : t == C ? 1 : i ? -1 : o ? 1 : u ? P(u, e) - P(u, t) : 0;
                        if (i === o) return pe(e, t);
                        n = e;
                        while (n = n.parentNode) a.unshift(n);
                        n = t;
                        while (n = n.parentNode) s.unshift(n);
                        while (a[r] === s[r]) r++;
                        return r ? pe(a[r], s[r]) : a[r] == p ? -1 : s[r] == p ? 1 : 0
                    }), C
                /**
                 * @param e - t Th options to use for this query.
                 * @param t
                 * 
                 * @return The query result or null if there is no match
                 */
            }, se.matches = function(e, t) {
                return se(e, null, null, t)
                /**
                 * @param e - t Th type to check against.
                 * @param t
                 * 
                 * @return Whether the event was matched
                 */
            }, se.matchesSelector = function(e, t) {
                if (T(e), d.matchesSelector && E && !N[t + " "] && (!s || !s.test(t)) && (!v || !v.test(t))) try {
                    var n = c.call(e, t);
                    if (n || d.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n
                } catch (e) {
                    N(t, !0)
                }
                return 0 < se(t, C, null, [e])
                    .length
                /**
                 * @param e - t Th transform options to apply.
                 * @param t
                 * 
                 * @return The transformed document or null if the document is null
                 */
            }, se.contains = function(e, t) {
                return (e.ownerDocument || e) != C && T(e), y(e, t)
                /**
                 * @param e - t Th name of the attribute.
                 * @param t
                 * 
                 * @return The value of the attribute
                 */
            }, se.attr = function(e, t) {
                (e.ownerDocument || e) != C && T(e);
                var n = b.attrHandle[t.toLowerCase()],
                    r = n && D.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !E) : void 0;
                return void 0 !== r ? r : d.attributes || !E ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null
                /**
                 * @param e
                 * 
                 * @return { String } Converted string
                 */
            }, se.escape = function(e) {
                return (e + "")
                    .replace(re, ie)
                /**
                 * @param e
                 */
            }, se.error = function(e) {
                throw new Error("Syntax error, unrecognized expression: " + e)
                /**
                 * @param e
                 * 
                 * @return { Array } The array
                 */
            }, se.uniqueSort = function(e) {
                var t, n = [],
                    r = 0,
                    i = 0;
                if (l = !d.detectDuplicates, u = !d.sortStable && e.slice(0), e.sort(j), l) {
                    while (t = e[i++]) t === e[i] && (r = n.push(i));
                    while (r--) e.splice(n[r], 1)
                }
                return u = null, e

                /**
                 * @param e
                 * 
                 * @return Text content of the
                 */
            }, o = se.getText = function(e) {
                var t, n = "",
                    r = 0,
                    i = e.nodeType;
                if (i) {
                    if (1 === i || 9 === i || 11 === i) {
                        if ("string" == typeof e.textContent) return e.textContent;
                        for (e = e.firstChild; e; e = e.nextSibling) n += o(e)
                    } else if (3 === i || 4 === i) return e.nodeValue
                } else
                    while (t = e[r++]) n += o(t);
                return n
            }, (b = se.selectors = {
                cacheLength: 50,
                createPseudo: le,
                match: G,
                attrHandle: {},
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: !0
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: !0
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    /**
                     * @param e
                     * 
                     * @return { Array } The modified event
                     */
                    ATTR: function(e) {
                        return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || "")
                            .replace(te, ne), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4)
                    },
                    /**
                     * @param e
                     * 
                     * @return { Object } The error
                     */
                    CHILD: function(e) {
                        return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && se.error(e[0]), e
                    },
                    /**
                     * @param e
                     * 
                     * @return { Boolean } true if the event is valid
                     */
                    PSEUDO: function(e) {
                        var t, n = !e[6] && e[2];
                        return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = h(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3))
                    }
                },
                filter: {
                    /**
                     * Checks if an element matches the given string.
                     * 
                     * @param e - The string to check.
                     * 
                     * @return { Function } The function to use in check
                     */
                    TAG: function(e) {
                        var t = e.replace(te, ne)
                            .toLowerCase();
                        /**
                         * @return { boolean } true if
                         */
                        return "*" === e ? function() {
                            return !0
                            /**
                             * @param e
                             * 
                             * @return { boolean } True if the node matches
                             */
                        } : function(e) {
                            return e.nodeName && e.nodeName.toLowerCase() === t
                        }
                    },
                    /**
                     * Returns a RegExp that matches classes and attributes of an element.
                     * 
                     * @param e - The name of the element to match.
                     * 
                     * @return A RegExp that matches classes and attributes of an element
                     */
                    CLASS: function(e) {
                        var t = m[e + " "];
                        /**
                         * @param e
                         * 
                         * @return { boolean } True if the element has a
                         */
                        return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && m(e, function(e) {
                            return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "")
                        })
                    },
                    /**
                     * Generates a function to test an attribute.
                     * 
                     * @param n - Name of attribute to test.
                     * @param r - Matching operator (! ^ ^ | ).
                     * @param i - Value to match against.
                     * 
                     * @return { Function } A function to test an attribute
                     */
                    ATTR: function(n, r, i) {
                        /**
                         * @param e
                         * 
                         * @return { boolean } True if the attribute
                         */
                        return function(e) {
                            var t = se.attr(e, n);
                            return null == t ? "!=" === r : !r || (t += "", "=" === r ? t === i : "!=" === r ? t !== i : "^=" === r ? i && 0 === t.indexOf(i) : "*=" === r ? i && -1 < t.indexOf(i) : "$=" === r ? i && t.slice(-i.length) === i : "~=" === r ? -1 < (" " + t.replace(B, " ") + " ")
                                .indexOf(i) : "|=" === r && (t === i || t.slice(0, i.length + 1) === i + "-"))
                        }
                    },
                    /**
                     * Returns a function that checks if an element is a descendant of another element.
                     * 
                     * @param h - " nth " to check the first child " last " to check the last child or " of - type " to check the first and last child of
                     * @param e - " of - type " to check the first child or " last " to check the last child of
                     * @param t - " parent " to check if the element is a descendant of
                     * @param g - " first " to check if the element is a descendant of
                     * @param v - " last " to check if the element is a descendant of
                     * 
                     * @return { Function } the function
                     */
                    CHILD: function(h, e, t, g, v) {
                        var y = "nth" !== h.slice(0, 3),
                            m = "last" !== h.slice(-4),
                            x = "of-type" === e;
                        /**
                         * @param e
                         * 
                         * @return { boolean } True if the element is
                         */
                        return 1 === g && 0 === v ? function(e) {
                            return !!e.parentNode
                            /**
                             * @param e - t Whther or not to return children of the element.
                             * @param t - n Wheher or not to return previous / next siblings of the element.
                             * @param n
                             * 
                             * @return { Boolean } True if the element is a child of any of the parent's children
                             */
                        } : function(e, t, n) {
                            var r, i, o, a, s, u, l = y !== m ? "nextSibling" : "previousSibling",
                                c = e.parentNode,
                                f = x && e.nodeName.toLowerCase(),
                                p = !n && !x,
                                d = !1;
                            if (c) {
                                if (y) {
                                    while (l) {
                                        a = e;
                                        while (a = a[l])
                                            if (x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) return !1;
                                        u = l = "only" === h && !u && "nextSibling"
                                    }
                                    return !0
                                }
                                if (u = [m ? c.firstChild : c.lastChild], m && p) {
                                    d = (s = (r = (i = (o = (a = c)[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === k && r[1]) && r[2], a = s && c.childNodes[s];
                                    while (a = ++s && a && a[l] || (d = s = 0) || u.pop())
                                        if (1 === a.nodeType && ++d && a === e) {
                                            i[h] = [k, s, d];
                                            break
                                        }
                                } else if (p && (d = s = (r = (i = (o = (a = e)[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === k && r[1]), !1 === d)
                                    while (a = ++s && a && a[l] || (d = s = 0) || u.pop())
                                        if ((x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) && ++d && (p && ((i = (o = a[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] = [k, d]), a === e)) break;
                                return (d -= v) === g || d % g == 0 && 0 <= d / g
                            }
                        }
                    },
                    /**
                     * Returns a pseudo - filter function for the given selector.
                     * 
                     * @param e - The selector to use.
                     * @param o - The options to pass to the pseudo - filter function.
                     * 
                     * @return { Function } The pseudo - filter function
                     */
                    PSEUDO: function(e, o) {
                        var t, a = b.pseudos[e] || b.setFilters[e.toLowerCase()] || se.error("unsupported pseudo: " + e);
                        /**
                         * @param e - t Th options to set on the document
                         * @param t
                         */
                        return a[S] ? a(o) : 1 < a.length ? (t = [e, e, "", o], b.setFilters.hasOwnProperty(e.toLowerCase()) ? le(function(e, t) {
                            var n, r = a(e, o),
                                i = r.length;
                            while (i--) e[n = P(e, r[i])] = !(t[n] = r[i])
                            /**
                             * @param e
                             * 
                             * @return The value to set on the document
                             */
                        }) : function(e) {
                            return a(e, 0, t)
                        }) : a
                    }
                },
                pseudos: {
                    /**
                     * Parses a query string and returns a query that can be used to query the server.
                     * 
                     * @param e - The query string to parse.
                     * 
                     * @return { Query } A query that can be used to query the server
                     */
                    not: le(function(e) {
                        var r = [],
                            i = [],
                            s = f(e.replace($, "$1"));
                        /**
                         * @param e - t Th state to set on the event.
                         * @param t - n The name o use for local storage.
                         * @param n
                         * @param r
                         */
                        return s[S] ? le(function(e, t, n, r) {
                            var i, o = s(e, null, r, []),
                                a = e.length;
                            while (a--)(i = o[a]) && (e[a] = !(t[a] = i))
                            /**
                             * @param e - t Th key to set.
                             * @param t - n The key / value pair o set.
                             * @param n
                             * 
                             * @return { Promise } A promise that resolves to the set
                             */
                        }) : function(e, t, n) {
                            return r[0] = e, s(r, null, n, i), r[0] = null, !i.pop()
                        }
                    }),
                    /**
                     * Returns a function that determines whether the given document can be inserted into the index.
                     * 
                     * @param t - The document to insert into.
                     * 
                     * @return { Function } A function that takes an index and returns true if the document can be inserted into the index
                     */
                    has: le(function(t) {
                        /**
                         * @param e
                         * 
                         * @return Whether or not the event exists
                         */
                        return function(e) {
                            return 0 < se(t, e)
                                .length
                        }
                    }),
                    /**
                     * Checks if the given string is a substring of the document.
                     * 
                     * @param t - The string to check.
                     * 
                     * @return boolean } A function that takes an HTMLDocument as an argument and returns true if the string is a substring of the document
                     */
                    contains: le(function(t) {
                        return t = t.replace(te, ne),
                            /**
                             * @param e
                             * 
                             * @return True if the element has text
                             */
                            function(e) {
                                return -1 < (e.textContent || o(e))
                                    .indexOf(t)
                            }
                    }),
                    /**
                     * Checks whether or not the language is supported
                     * 
                     * @param n - The language to check.
                     * 
                     * @return { boolean } true if
                     */
                    lang: le(function(n) {
                        return V.test(n || "") || se.error("unsupported lang: " + n), n = n.replace(te, ne)
                            .toLowerCase(),
                            /**
                             * @param e
                             * 
                             * @return True if the element is indeed a lang
                             */
                            function(e) {
                                var t;
                                do {
                                    if (t = E ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + "-")
                                } while ((e = e.parentNode) && 1 === e.nodeType);
                                return !1
                            }
                    }),
                    /**
                     * @param e
                     * 
                     * @return True if the event matches
                     */
                    target: function(e) {
                        var t = n.location && n.location.hash;
                        return t && t.slice(1) === e.id
                    },
                    /**
                     * @param e
                     * 
                     * @return { boolean } True if the value is equal to ` a `
                     */
                    root: function(e) {
                        return e === a
                    },
                    /**
                     * @param e
                     * 
                     * @return True if the element is the active element
                     */
                    focus: function(e) {
                        return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)
                    },
                    enabled: ge(!1),
                    disabled: ge(!0),
                    /**
                     * @param e
                     * 
                     * @return True if the element is an input or option
                     */
                    checked: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && !!e.checked || "option" === t && !!e.selected
                    },
                    /**
                     * @param e
                     * 
                     * @return { boolean } True if the element is selected
                     */
                    selected: function(e) {
                        return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected
                    },
                    /**
                     * @param e
                     * 
                     * @return 1 if there are no children 0 otherwise
                     */
                    empty: function(e) {
                        for (e = e.firstChild; e; e = e.nextSibling)
                            if (e.nodeType < 6) return !1;
                        return !0
                    },
                    /**
                     * @param e
                     * 
                     * @return { boolean } True if the value is non - empty
                     */
                    parent: function(e) {
                        return !b.pseudos.empty(e)
                    },
                    /**
                     * @param e
                     * 
                     * @return True if e is a DOM node
                     */
                    header: function(e) {
                        return J.test(e.nodeName)
                    },
                    /**
                     * @param e
                     * 
                     * @return True if the element is a text node
                     */
                    input: function(e) {
                        return Q.test(e.nodeName)
                    },
                    /**
                     * @param e
                     * 
                     * @return True if the element is an input and a button
                     */
                    button: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && "button" === e.type || "button" === t
                    },
                    /**
                     * @param e
                     * 
                     * @return True if the element is an input and the type attribute is set
                     */
                    text: function(e) {
                        var t;
                        return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase())
                    },
                    /**
                     * @return { Number } An integer
                     */
                    first: ve(function() {
                        return [0]
                    }),
                    /**
                     * @param e - t Th index of the event.
                     * @param t
                     * 
                     * @return { Array } The event
                     */
                    last: ve(function(e, t) {
                        return [t - 1]
                    }),
                    /**
                     * @param e - t Th value to compare.
                     * @param t - n The value o compare.
                     * @param n
                     * 
                     * @return { Number } The result
                     */
                    eq: ve(function(e, t, n) {
                        return [n < 0 ? n + t : n]
                    }),
                    /**
                     * @param e - t Numbr of elements to append.
                     * @param t
                     * 
                     * @return { Array } Array with appended elements
                     */
                    even: ve(function(e, t) {
                        for (var n = 0; n < t; n += 2) e.push(n);
                        return e
                    }),
                    /**
                     * @param e - t Numbr of values to append.
                     * @param t
                     * 
                     * @return { Array } Array with appended values
                     */
                    odd: ve(function(e, t) {
                        for (var n = 1; n < t; n += 2) e.push(n);
                        return e
                    }),
                    /**
                     * @param e - t Th number of items to add.
                     * @param t - n The maximum number of iems to add.
                     * @param n
                     * 
                     * @return { Array } The array passed in
                     */
                    lt: ve(function(e, t, n) {
                        for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r;) e.push(r);
                        return e
                    }),
                    /**
                     * @param e - t Th number of elements to add.
                     * @param t - n The max number of elemens to add.
                     * @param n
                     * 
                     * @return { Array } The array passed in
                     */
                    gt: ve(function(e, t, n) {
                        for (var r = n < 0 ? n + t : n; ++r < t;) e.push(r);
                        return e
                    })
                }
            })
            .pseudos.nth = b.pseudos.eq, {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            }) b.pseudos[e] = de(e);
        for (e in {
                submit: !0,
                reset: !0
            }) b.pseudos[e] = he(e);

        /**
         * This is an example of how to use this module
         */
        function me() {}

        /**
         * Converts an array of ESTree objects to a string.
         * 
         * @param e - An array of ESTree objects.
         * 
         * @return The string representation of the ESTree
         */
        function xe(e) {
            for (var t = 0, n = e.length, r = ""; t < n; t++) r += e[t].value;
            return r
        }

        /**
         * Creates a callback to be used with an event's find method.
         * 
         * @param s - Callback to be used for finding elements.
         * @param e - Object containing the event properties.
         * @param t - Whether or not to check against parent node.
         * 
         * @return { Function } Callback to be used
         */
        function be(s, e, t) {
            var u = e.dir,
                l = e.next,
                c = l || u,
                f = t && "parentNode" === c,
                p = r++;
            /**
             * @param e - t Whther to execute the callback or not.
             * @param t - n Wheher to return the result of the callback.
             * @param n
             * 
             * @return { boolean } True if the callback was executed
             */
            return e.first ? function(e, t, n) {
                while (e = e[u])
                    if (1 === e.nodeType || f) return s(e, t, n);
                return !1
                /**
                 * @param e - t Whther or not to allow child nodes to be removed.
                 * @param t - n Wheher or not to remove child nodes.
                 * @param n
                 * 
                 * @return { boolean } ` true ` if the element is removed
                 */
            } : function(e, t, n) {
                var r, i, o, a = [k, p];
                if (n) {
                    while (e = e[u])
                        if ((1 === e.nodeType || f) && s(e, t, n)) return !0
                } else
                    while (e = e[u])
                        if (1 === e.nodeType || f)
                            if (i = (o = e[S] || (e[S] = {}))[e.uniqueID] || (o[e.uniqueID] = {}), l && l === e.nodeName.toLowerCase()) e = e[u] || e;
                            else {
                                if ((r = i[c]) && r[0] === k && r[1] === p) return a[2] = r[2];
                                if ((i[c] = a)[2] = s(e, t, n)) return !0
                            } return !1
            }
        }

        /**
         * Converts a predicate to a predicate that tests if a value passes.
         * 
         * @param i - The predicate to test.
         * 
         * @return { Function } The predicate
         */
        function we(i) {
            /**
             * @param e - t Th data that triggered the event.
             * @param t - n The opions passed to the event.
             * @param n
             * 
             * @return { boolean } True if the event should be ignored
             */
            return 1 < i.length ? function(e, t, n) {
                var r = i.length;
                while (r--)
                    if (!i[r](e, t, n)) return !1;
                return !0
            } : i[0]
        }

        /**
         * Filters a list of documents based on a predicate.
         * 
         * @param e - The list of documents to filter.
         * @param t - The list of document IDs to filter on.
         * @param n - A predicate to specify whether to include documents that don't match the predicate.
         * @param r - The number of documents to include in the filtered list.
         * @param i - The index of the document to filter on.
         * 
         * @return { Array } A list of filtered documents
         */
        function Te(e, t, n, r, i) {
            for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++)(o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s)));
            return a
        }

        /**
         * Creates a set of nodes that match the given query criteria.
         * 
         * @param d - The query criteria to match. If null all nodes are matched.
         * @param h - The selector to match. If null all nodes are matched.
         * @param g - The selector to match. If null no filtering is performed.
         * @param v - The node - to - match function to use.
         * @param y - The document to create nodes from.
         * @param e - The options to use.
         * 
         * @return { Object } The set of nodes
         */
        function Ce(d, h, g, v, y, e) {
            /**
             * Applies changes to a document before it is sent to the server.
             * 
             * @param e - If true changes will be applied to the server as part of the update ; if false changes will be left untouched.
             * @param t - The list of changes to apply to the document.
             * @param n - The document to modify.
             * @param r - The number of changes to apply.
             * 
             * @return The document with the changes applied
             */
            return v && !v[S] && (v = Ce(v)), y && !y[S] && (y = Ce(y, e)), le(function(e, t, n, r) {
                var i, o, a, s = [],
                    u = [],
                    l = t.length,
                    /**
                     * @param e - t Th list of document IDs to update.
                     * @param t - n The documen to update.
                     * @param n
                     * 
                     * @return { Number } The document with updated documents
                     */
                    c = e || function(e, t, n) {
                        for (var r = 0, i = t.length; r < i; r++) se(e, t[r], n);
                        return n
                    }(h || "*", n.nodeType ? [n] : n, []),
                    f = !d || !e && h ? c : Te(c, s, d, n, r),
                    p = g ? y || (e ? d : l || v) ? [] : t : f;
                if (g && g(f, p, n, r), v) {
                    i = Te(p, u), v(i, [], n, r), o = i.length;
                    while (o--)(a = i[o]) && (p[u[o]] = !(f[u[o]] = a))
                }
                if (e) {
                    if (y || d) {
                        if (y) {
                            i = [], o = p.length;
                            while (o--)(a = p[o]) && i.push(f[o] = a);
                            y(null, p = [], i, r)
                        }
                        o = p.length;
                        while (o--)(a = p[o]) && -1 < (i = y ? P(e, a) : s[o]) && (e[i] = !(t[i] = a))
                    }
                } else p = Te(p === t ? p.splice(l, p.length) : p), y ? y(null, t, p, r) : H.apply(t, p)
            })
        }

        /**
         * Applies filters to document events.
         * 
         * @param e - Array of document events to filter.
         * 
         * @return A filter that matches the document events
         */
        function Ee(e) {
            /**
             * @param e
             * 
             * @return { boolean } True if the value is i
             */
            for (var i, t, n, r = e.length, o = b.relative[e[0].type], a = o || b.relative[" "], s = o ? 1 : 0, u = be(function(e) {
                    return e === i
                    /**
                     * @param e
                     * 
                     * @return True if the value is valid
                     */
                }, a, !0), l = be(function(e) {
                    return -1 < P(i, e)
                    /**
                     * @param e - t Th node to set or null to use the document's default node.
                     * @param t - n If rue the document is modified as a side - effect of this call.
                     * @param n
                     * 
                     * @return The node that was modified
                     */
                }, a, !0), c = [function(e, t, n) {
                    var r = !o && (n || t !== w) || ((i = t)
                        .nodeType ? u(e, t, n) : l(e, t, n));
                    return i = null, r
                }]; s < r; s++)
                if (t = b.relative[e[s].type]) c = [be(we(c), t)];
                else {
                    if ((t = b.filter[e[s].type].apply(null, e[s].matches))[S]) {
                        for (n = ++s; n < r; n++)
                            if (b.relative[e[n].type]) break;
                        return Ce(1 < s && we(c), 1 < s && xe(e.slice(0, s - 1)
                                .concat({
                                    value: " " === e[s - 2].type ? "*" : ""
                                }))
                            .replace($, "$1"), t, s < n && Ee(e.slice(s, n)), n < r && Ee(e = e.slice(n)), n < r && xe(e))
                    }
                    c.push(t)
                } return we(c)
        }
        /**
         * @param e - t Whther to return the whole list or just the first match.
         * @param t
         * 
         * @return { Number } The number of matches
         */
        return me.prototype = b.filters = b.pseudos, b.setFilters = new me, h = se.tokenize = function(e, t) {
                var n, r, i, o, a, s, u, l = x[e + " "];
                if (l) return t ? 0 : l.slice(0);
                a = e, s = [], u = b.preFilter;
                while (a) {
                    for (o in n && !(r = _.exec(a)) || (r && (a = a.slice(r[0].length) || a), s.push(i = [])), n = !1, (r = z.exec(a)) && (n = r.shift(), i.push({
                            value: n,
                            type: r[0].replace($, " ")
                        }), a = a.slice(n.length)), b.filter) !(r = G[o].exec(a)) || u[o] && !(r = u[o](r)) || (n = r.shift(), i.push({
                        value: n,
                        type: o,
                        matches: r
                    }), a = a.slice(n.length));
                    if (!n) break
                }
                return t ? a.length : a ? se.error(e) : x(e, s)
                    .slice(0)
                /**
                 * Returns tags to be used for a selection.
                 * 
                 * @param e - Tag name to search for.
                 * @param t - Optional list of tags to use.
                 * 
                 * @return { String } Tag name
                 */
            }, f = se.compile = function(e, t) {
                var n, v, y, m, x, r, i = [],
                    o = [],
                    a = A[e + " "];
                if (!a) {
                    t || (t = h(e)), n = t.length;
                    while (n--)(a = Ee(t[n]))[S] ? i.push(a) : o.push(a);
                    /**
                     * @param e - t Tag to match ( dfaults to C ).
                     * @param t - n Wheher to match document attributes ( defaults to false ).
                     * @param n
                     * @param r - i Optional tag selecto to use instead of b. find ( " * " ).
                     * @param i
                     * 
                     * @return { Array } Returns the array of documents
                     */
                    (a = A(e, (v = o, m = 0 < (y = i)
                        .length, x = 0 < v.length, r = function(e, t, n, r, i) {
                            var o, a, s, u = 0,
                                l = "0",
                                c = e && [],
                                f = [],
                                p = w,
                                d = e || x && b.find.TAG("*", i),
                                h = k += null == p ? 1 : Math.random() || .1,
                                g = d.length;
                            for (i && (w = t == C || t || i); l !== g && null != (o = d[l]); l++) {
                                if (x && o) {
                                    a = 0, t || o.ownerDocument == C || (T(o), n = !E);
                                    while (s = v[a++])
                                        if (s(o, t || C, n)) {
                                            r.push(o);
                                            break
                                        } i && (k = h)
                                }
                                m && ((o = !s && o) && u--, e && c.push(o))
                            }
                            if (u += l, m && l !== u) {
                                a = 0;
                                while (s = y[a++]) s(c, f, t, n);
                                if (e) {
                                    if (0 < u)
                                        while (l--) c[l] || f[l] || (f[l] = q.call(r));
                                    f = Te(f)
                                }
                                H.apply(r, f), i && !e && 0 < f.length && 1 < u + y.length && se.uniqueSort(r)
                            }
                            return i && (k = h, w = p), c
                        }, m ? le(r) : r)))
                    .selector = e
                }
                return a
                /**
                 * Checks a selector for content and returns the result
                 * 
                 * @param e - The selector to check.
                 * @param t - The parent to check against.
                 * @param n - The result to return.
                 * @param r - Whether to use selector.
                 * 
                 * @return The result of the check
                 */
            }, g = se.select = function(e, t, n, r) {
                var i, o, a, s, u, l = "function" == typeof e && e,
                    c = !r && h(e = l.selector || e);
                if (n = n || [], 1 === c.length) {
                    if (2 < (o = c[0] = c[0].slice(0))
                        .length && "ID" === (a = o[0])
                        .type && 9 === t.nodeType && E && b.relative[o[1].type]) {
                        if (!(t = (b.find.ID(a.matches[0].replace(te, ne), t) || [])[0])) return n;
                        l && (t = t.parentNode), e = e.slice(o.shift()
                            .value.length)
                    }
                    i = G.needsContext.test(e) ? 0 : o.length;
                    while (i--) {
                        if (a = o[i], b.relative[s = a.type]) break;
                        if ((u = b.find[s]) && (r = u(a.matches[0].replace(te, ne), ee.test(o[0].type) && ye(t.parentNode) || t))) {
                            if (o.splice(i, 1), !(e = r.length && xe(o))) return H.apply(n, r), n;
                            break
                        }
                    }
                }
                return (l || f(e, c))(r, t, !E, n, !t || ee.test(e) && ye(t.parentNode) || t), n
                /**
                 * @param e
                 * 
                 * @return { number } 1 if position is inside
                 */
            }, d.sortStable = S.split("")
            .sort(j)
            .join("") === S, d.detectDuplicates = !!l, T(), d.sortDetached = ce(function(e) {
                return 1 & e.compareDocumentPosition(C.createElement("fieldset"))
                /**
                 * @param e
                 * 
                 * @return { Boolean } True if the link is
                 */
            }), ce(function(e) {
                return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href")
                /**
                 * @param e - t Attribut name to get.
                 * @param t - n If rue return type attribute.
                 * @param n
                 * 
                 * @return { String } Attribute value
                 */
            }) || fe("type|href|height|width", function(e, t, n) {
                if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2)
                /**
                 * @param e
                 * 
                 * @return { Object } The wrapped element
                 */
            }), d.attributes && ce(function(e) {
                return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value")
                /**
                 * @param e - t Th type of element being edited.
                 * @param t - n Wheher or not the user pressed the button.
                 * @param n
                 * 
                 * @return The default value for the element
                 */
            }) || fe("value", function(e, t, n) {
                if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue
                /**
                 * @param e
                 * 
                 * @return { boolean } True if disabled false
                 */
            }), ce(function(e) {
                return null == e.getAttribute("disabled")
                /**
                 * @param e - t Nam of attribute to check.
                 * @param t - n If rue case - insensitive.
                 * @param n
                 * 
                 * @return Value of attribute or null
                 */
            }) || fe(R, function(e, t, n) {
                var r;
                if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null
            }), se
    }(C);
    S.find = d, S.expr = d.selectors, S.expr[":"] = S.expr.pseudos, S.uniqueSort = S.unique = d.uniqueSort, S.text = d.getText, S.isXMLDoc = d.isXML, S.contains = d.contains, S.escapeSelector = d.escape;
    /**
     * @param e - t Th key to search for.
     * @param t - n If specified he element must match this value.
     * @param n
     * 
     * @return An array of matched elements
     */
    var h = function(e, t, n) {
            var r = [],
                i = void 0 !== n;
            while ((e = e[t]) && 9 !== e.nodeType)
                if (1 === e.nodeType) {
                    if (i && S(e)
                        .is(n)) break;
                    r.push(e)
                } return r
        },
        /**
         * @param e - t Th element to exclude from the result.
         * @param t
         * 
         * @return An array of siblings up to and including e
         */
        T = function(e, t) {
            for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
            return n
        },
        k = S.expr.match.needsContext;

    /**
     * Checks if an element is of a specific type
     * 
     * @param e - The element to check.
     * @param t - The type to check against.
     * 
     * @return True if the element is of type t
     */
    function A(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
    }
    var N = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

    /**
     * Returns an array of elements matching the criteria.
     * 
     * @param e - The array to search.
     * @param n - The value to match.
     * @param r - The criteria to match.
     * 
     * @return { Array } The matched elements
     */
    function j(e, n, r) {
        /**
         * @param e - t Th value to compare.
         * @param t
         * 
         * @return True if the value is truthy
         */
        return m(n) ? S.grep(e, function(e, t) {
            return !!n.call(e, t, e) !== r
            /**
             * @param e
             * 
             * @return { boolean } True if the value is valid
             */
        }) : n.nodeType ? S.grep(e, function(e) {
            return e === n !== r
            /**
             * @param e
             * 
             * @return True if the value is truthy
             */
        }) : "string" != typeof n ? S.grep(e, function(e) {
            return -1 < i.call(n, e) !== r
        }) : S.filter(n, e, r)
    }
    /**
     * Returns the elements that match the given selector
     * 
     * @param e - The selector to match against
     * @param t - The selectors to match against
     * @param n - Whether to match the selector
     * 
     * @return { Array } An array of
     */
    S.filter = function(e, t, n) {
        var r = t[0];
        /**
         * @param e
         * 
         * @return True if the element is an element
         */
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? S.find.matchesSelector(r, e) ? [r] : [] : S.find.matches(e, S.grep(t, function(e) {
            return 1 === e.nodeType
        }))
    }, S.fn.extend({
        /**
         * Returns an array of elements that match the given criteria.
         * 
         * @param e - The criteria to match.
         * 
         * @return { Array } The array of matching elements
         */
        find: function(e) {
            var t, n, r = this.length,
                i = this;
            /**
             * @return { Boolean } true if
             */
            if ("string" != typeof e) return this.pushStack(S(e)
                .filter(function() {
                    for (t = 0; t < r; t++)
                        if (S.contains(i[t], this)) return !0
                }));
            for (n = this.pushStack([]), t = 0; t < r; t++) S.find(e, i[t], n);
            return 1 < r ? S.uniqueSort(n) : n
        },
        /**
         * @param e
         * 
         * @return { PushResult } Returns a push result
         */
        filter: function(e) {
            return this.pushStack(j(this, e || [], !1))
        },
        /**
         * @param e
         * 
         * @return { PushBuilder } The builder
         */
        not: function(e) {
            return this.pushStack(j(this, e || [], !0))
        },
        /**
         * @param e
         * 
         * @return { Number } The number of items in the array
         */
        is: function(e) {
            return !!j(this, "string" == typeof e && k.test(e) ? S(e) : e || [], !1)
                .length
        }
    });
    var D, q = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    /**
     * @param e - t If providd the results will be merged with the selector's current state.
     * @param t - n The query o use instead of the ` this ` object.
     * @param n
     * 
     * @return { Object } The query that was executed
     */
    (S.fn.init = function(e, t, n) {
        var r, i;
        if (!e) return this;
        if (n = n || D, "string" == typeof e) {
            if (!(r = "<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : q.exec(e)) || !r[1] && t) return !t || t.jquery ? (t || n)
                .find(e) : this.constructor(t)
                .find(e);
            if (r[1]) {
                if (t = t instanceof S ? t[0] : t, S.merge(this, S.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : E, !0)), N.test(r[1]) && S.isPlainObject(t))
                    for (r in t) m(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
                return this
            }
            return (i = E.getElementById(r[2])) && (this[0] = i, this.length = 1), this
        }
        return e.nodeType ? (this[0] = e, this.length = 1, this) : m(e) ? void 0 !== n.ready ? n.ready(e) : e(S) : S.makeArray(e, this)
    })
    .prototype = S.fn, D = S(E);
    var L = /^(?:parents|prev(?:Until|All))/,
        H = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };

    /**
     * Returns the first element of the given type up to but not including the element with the given id.
     * 
     * @param e - The element to search.
     * @param t - The id of the element to return.
     * 
     * @return The first element of the given type
     */
    function O(e, t) {
        while ((e = e[t]) && 1 !== e.nodeType);
        return e
    }
    S.fn.extend({
        /**
         * Returns an array of elements matching the given filter criteria.
         * 
         * @param e - An optional filter criteria.
         * 
         * @return { Array } An array of elements matching the given filter criteria
         */
        has: function(e) {
            var t = S(e, this),
                n = t.length;
            /**
             * @return Whether or not the set is covered by any of the set
             */
            return this.filter(function() {
                for (var e = 0; e < n; e++)
                    if (S.contains(this, t[e])) return !0
            })
        },
        /**
         * @param e - t An optional parnt to exclude from the results.
         * @param t
         * 
         * @return The array of matched elements
         */
        closest: function(e, t) {
            var n, r = 0,
                i = this.length,
                o = [],
                a = "string" != typeof e && S(e);
            if (!k.test(e))
                for (; r < i; r++)
                    for (n = this[r]; n && n !== t; n = n.parentNode)
                        if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && S.find.matchesSelector(n, e))) {
                            o.push(n);
                            break
                        } return this.pushStack(1 < o.length ? S.uniqueSort(o) : o)
        },
        /**
         * @param e
         * 
         * @return { Number } The index of the element
         */
        index: function(e) {
            return e ? "string" == typeof e ? i.call(S(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first()
                .prevAll()
                .length : -1
        },
        /**
         * @param e - t An optional ky / value pair to merge with the current values.
         * @param t
         * 
         * @return A new stack with the merge applied
         */
        add: function(e, t) {
            return this.pushStack(S.uniqueSort(S.merge(this.get(), S(e, t))))
        },
        /**
         * @param e
         * 
         * @return { Object } The object
         */
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
        }
    }), S.each({
        /**
         * @param e
         * 
         * @return The parent of the element or null if there is none
         */
        parent: function(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null
        },
        /**
         * @param e
         * 
         * @return { Element } Parent of e
         */
        parents: function(e) {
            return h(e, "parentNode")
        },
        /**
         * @param e - t Tru if we are interested in the parent of this element.
         * @param t - n ( Opional ) If specified restricts the search to this node.
         * @param n
         * 
         * @return The HTML element that encloses the element
         */
        parentsUntil: function(e, t, n) {
            return h(e, "parentNode", n)
        },
        /**
         * @param e
         * 
         * @return The next sibling of the element
         */
        next: function(e) {
            return O(e, "nextSibling")
        },
        /**
         * @param e
         * 
         * @return The previous sibling of the element
         */
        prev: function(e) {
            return O(e, "previousSibling")
        },
        /**
         * @param e
         * 
         * @return HTML string of next
         */
        nextAll: function(e) {
            return h(e, "nextSibling")
        },
        /**
         * @param e
         * 
         * @return { String } HTML
         */
        prevAll: function(e) {
            return h(e, "previousSibling")
        },
        /**
         * @param e - t Th document being operated on.
         * @param t - n The name of he node to start traversing.
         * @param n
         * 
         * @return The HTML for the next node
         */
        nextUntil: function(e, t, n) {
            return h(e, "nextSibling", n)
        },
        /**
         * @param e - t Documnt node being examined.
         * @param t - n DOM node conaining the node to examine.
         * @param n
         * 
         * @return A string containing the HTML for the error
         */
        prevUntil: function(e, t, n) {
            return h(e, "previousSibling", n)
        },
        /**
         * @param e
         * 
         * @return { Array } The child nodes
         */
        siblings: function(e) {
            return T((e.parentNode || {})
                .firstChild, e)
        },
        /**
         * @param e
         * 
         * @return { Object } Child element
         */
        children: function(e) {
            return T(e.firstChild)
        },
        /**
         * @param e
         * 
         * @return The contentDocument if it exists otherwise the
         */
        contents: function(e) {
            return null != e.contentDocument && r(e.contentDocument) ? e.contentDocument : (A(e, "template") && (e = e.content || e), S.merge([], e.childNodes))
        }
        /**
         * Creates a repeatable iterator.
         * 
         * @param r - The name of the repeatable iterator to create.
         * @param i - The index to use when calling pushStack.
         * 
         * @return { String } The repeatable iterator
         */
    }, function(r, i) {
        /**
         * @param e - t An optional filtr that determines which events to include in the output.
         * @param t
         * 
         * @return { string } A string indicating whether the event was processed
         */
        S.fn[r] = function(e, t) {
            var n = S.map(this, i, e);
            return "Until" !== r.slice(-5) && (t = e), t && "string" == typeof t && (n = S.filter(t, n)), 1 < this.length && (H[r] || S.uniqueSort(n), L.test(r) && n.reverse()), this.pushStack(n)
        }
    });
    var P = /[^\x20\t\r\n\f]+/g;

    /**
     * Returns the value of an expression.
     * 
     * @param e - The expression to be evaluated.
     * 
     * @return The value of the expression
     */
    function R(e) {
        return e
    }

    /**
     * This is a test for the Jasmine compiler.
     * 
     * @param e - The exception to test
     */
    function M(e) {
        throw e
    }

    /**
     * Calls the provided functions with the provided arguments.
     * 
     * @param e - The promise to be fulfilled or rejected.
     * @param t - The function to be called when the promise is fulfilled.
     * @param n - The function to be called when the promise is rejections.
     * @param r - The number of arguments to be passed to the function
     */
    function I(e, t, n, r) {
        var i;
        try {
            e && m(i = e.promise) ? i.call(e)
                .done(t)
                .fail(n) : e && m(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r))
        } catch (e) {
            n.apply(void 0, [e])
        }
    }
    /**
     * A configuration object to customize the behavior of the mock
     * 
     * @param r - The object to customize. If a string is passed it will be treated as a JSON string.
     */
    S.Callbacks = function(r) {
        var e, n;
        /**
         * @param e - t Th name of the event
         * @param t
         */
        r = "string" == typeof r ? (e = r, n = {}, S.each(e.match(P) || [], function(e, t) {
            n[t] = !0
        }), n) : S.extend({}, r);
        var i, t, o, a, s = [],
            u = [],
            l = -1,
            /**
             * a / object
             */
            c = function() {
                for (a = a || r.once, o = i = !0; u.length; l = -1) {
                    t = u.shift();
                    while (++l < s.length) !1 === s[l].apply(t[0], t[1]) && r.stopOnFalse && (l = s.length, t = !1)
                }
                r.memory || (t = !1), i = !1, a && (s = t ? [] : "")
            },
            f = {
                /**
                 * Adds the string values to the query.
                 * 
                 * 
                 * @return { Query } Returns itself
                 */
                add: function() {
                    /**
                     * Checks whether the document can be modified.
                     * 
                     * @param e - The document to check
                     */
                    return s && (t && !i && (l = s.length - 1, u.push(t)), function n(e) {
                        /**
                         * @param e - t Th value to check
                         * @param t
                         */
                        S.each(e, function(e, t) {
                            m(t) ? r.unique && f.has(t) || s.push(t) : t && t.length && "string" !== w(t) && n(t)
                        })
                    }(arguments), t && !i && c()), this
                },
                /**
                 * Removes items from the set.
                 * 
                 * 
                 * @return { Query } The current query
                 */
                remove: function() {
                    /**
                     * @param e - t Array of itms to remove
                     * @param t
                     */
                    return S.each(arguments, function(e, t) {
                        var n;
                        while (-1 < (n = S.inArray(t, s, n))) s.splice(n, 1), n <= l && l--
                    }), this
                },
                /**
                 * @param e
                 * 
                 * @return True if the event exists
                 */
                has: function(e) {
                    return e ? -1 < S.inArray(e, s) : 0 < s.length
                },
                /**
                 * @return { Object } An object with the set
                 */
                empty: function() {
                    return s && (s = []), this
                },
                /**
                 * @return { Object } The object
                 */
                disable: function() {
                    return a = u = [], s = t = "", this
                },
                /**
                 * @return { Boolean } true if
                 */
                disabled: function() {
                    return !s
                },
                /**
                 * @return { Object } An instance of Query
                 */
                lock: function() {
                    return a = u = [], t || i || (s = t = ""), this
                },
                /**
                 * @return { boolean } true if
                 */
                locked: function() {
                    return !!a
                },
                /**
                 * @param e - t An optional array of vent names to register with the event.
                 * @param t
                 * 
                 * @return { Object } The instance of ` this `
                 */
                fireWith: function(e, t) {
                    return a || (t = [e, (t = t || [])
                        .slice ? t.slice() : t
                    ], u.push(t), i || c()), this
                },
                /**
                 * @return { Function } The return value of f. fireWith
                 */
                fire: function() {
                    return f.fireWith(this, arguments), this
                },
                /**
                 * @return Whether we are running in
                 */
                fired: function() {
                    return !!o
                }
            };
        return f
    }, S.extend({
        /**
         * This is the implementation of S. Deferred that can be used to monitor a promise.
         * 
         * @param e - The promise that is being fulfilled or rejected.
         * 
         * @return { Object } A promise that will be fulfilled with the result of the operation
         */
        Deferred: function(e) {
            var o = [
                    ["notify", "progress", S.Callbacks("memory"), S.Callbacks("memory"), 2],
                    ["resolve", "done", S.Callbacks("once memory"), S.Callbacks("once memory"), 0, "resolved"],
                    ["reject", "fail", S.Callbacks("once memory"), S.Callbacks("once memory"), 1, "rejected"]
                ],
                i = "pending",
                a = {
                    /**
                     * @return { number } the index of the
                     */
                    state: function() {
                        return i
                    },
                    /**
                     * @return { Stream } a new stream
                     */
                    always: function() {
                        return s.done(arguments)
                            .fail(arguments), this
                    },
                    /**
                     * @param e
                     * 
                     * @return { Promise } A promise that will resolve to the
                     */
                    "catch": function(e) {
                        return a.then(null, e)
                    },
                    /**
                     * Returns a promise that will be fulfilled or rejected based on the results of the callbacks.
                     * 
                     * 
                     * @return { Promise } A promise
                     */
                    pipe: function() {
                        var i = arguments;
                        /**
                         * Runs the callbacks and returns the results
                         * 
                         * @param r - The promise to return results
                         */
                        return S.Deferred(function(r) {
                                /**
                                 * Executes a callback and returns a promise
                                 * 
                                 * @param e - The value to pass to the callback.
                                 * @param t - The property to use
                                 */
                                S.each(o, function(e, t) {
                                    var n = m(i[t[4]]) && i[t[4]];
                                    /**
                                     * a / object
                                     */
                                    s[t[1]](function() {
                                        var e = n && n.apply(this, arguments);
                                        e && m(e.promise) ? e.promise()
                                            .progress(r.notify)
                                            .done(r.resolve)
                                            .fail(r.reject) : r[t[0] + "With"](this, n ? [e] : arguments)
                                    })
                                }), i = null
                            })
                            .promise()
                    },
                    /**
                     * Creates a function that will resolve the provided promise with the provided arguments.
                     * 
                     * @param t - The callback to invoke when the promise is resolved.
                     * @param n - The value to use as the first argument to the returned function.
                     * @param r - The value to use as the second argument to the returned function.
                     * 
                     * @return { Function } A function that will resolve with the provided arguments
                     */
                    then: function(t, n, r) {
                        var u = 0;

                        /**
                         * Creates a function that will resolve or reject this Deferred.
                         * 
                         * @param i - The number of times the function has been called
                         * @param o - The object containing the state to resolve
                         * @param a - The value to use when calling resolve
                         * @param s - Whether to use async resolution or async notifyWith
                         * 
                         * @return { Function } The new
                         */
                        function l(i, o, a, s) {
                            /**
                             * thenable self - resolve
                             */
                            return function() {
                                var n = this,
                                    r = arguments,
                                    /**
                                     * thenable self - resolve
                                     */
                                    e = function() {
                                        var e, t;
                                        if (!(i < u)) {
                                            if ((e = a.apply(n, r)) === o.promise()) throw new TypeError("Thenable self-resolution");
                                            t = e && ("object" == typeof e || "function" == typeof e) && e.then, m(t) ? s ? t.call(e, l(u, o, R, s), l(u, o, M, s)) : (u++, t.call(e, l(u, o, R, s), l(u, o, M, s), l(u, o, R, o.notifyWith))) : (a !== R && (n = void 0, r = [e]), (s || o.resolveWith)(n, r))
                                        }
                                    },
                                    /**
                                     * a / object
                                     */
                                    t = s ? e : function() {
                                        try {
                                            e()
                                        } catch (e) {
                                            S.Deferred.exceptionHook && S.Deferred.exceptionHook(e, t.stackTrace), u <= i + 1 && (a !== M && (n = void 0, r = [e]), o.rejectWith(n, r))
                                        }
                                    };
                                i ? t() : (S.Deferred.getStackHook && (t.stackTrace = S.Deferred.getStackHook()), C.setTimeout(t))
                            }
                        }
                        /**
                         * @param e
                         */
                        return S.Deferred(function(e) {
                                o[0][3].add(l(0, e, m(r) ? r : R, e.notifyWith)), o[1][3].add(l(0, e, m(t) ? t : R)), o[2][3].add(l(0, e, m(n) ? n : M))
                            })
                            .promise()
                    },
                    /**
                     * @param e
                     * 
                     * @return { Object } New object with defaults
                     */
                    promise: function(e) {
                        return null != e ? S.extend(e, a) : a
                    }
                },
                s = {};
            /**
             * Adds event listeners to the collection
             * 
             * @param e - The event to add listeners to
             * @param t - The event properties to add
             * 
             * @return { Array } The event
             */
            return S.each(o, function(e, t) {
                var n = t[2],
                    r = t[5];
                /**
                 * / / object
                 */
                a[t[1]] = n.add, r && n.add(function() {
                    i = r
                    /**
                     * @return { Object } The instance
                     */
                }, o[3 - e][2].disable, o[3 - e][3].disable, o[0][2].lock, o[0][3].lock), n.add(t[3].fire), s[t[0]] = function() {
                    return s[t[0] + "With"](this === s ? void 0 : this, arguments), this
                }, s[t[0] + "With"] = n.fireWith
            }), a.promise(s), e && e.call(s, s), s
        },
        /**
         * Creates a S. Deferred that will be fulfilled or rejected with the given arguments.
         * 
         * @param e - The value to be passed to the returned promise.
         * 
         * @return A new S. Deferred
         */
        when: function(e) {
            var n = arguments.length,
                t = n,
                r = Array(t),
                i = s.call(arguments),
                o = S.Deferred(),
                /**
                 * Creates a function that will resolve with the given value.
                 * 
                 * @param t - The name of the property to set.
                 * 
                 * @return { Function } A function that will resolve with the given value
                 */
                a = function(t) {
                    /**
                     * @param e
                     */
                    return function(e) {
                        r[t] = this, i[t] = 1 < arguments.length ? s.call(arguments) : e, --n || o.resolveWith(r, i)
                    }
                };
            if (n <= 1 && (I(e, o.done(a(t))
                    .resolve, o.reject, !n), "pending" === o.state() || m(i[t] && i[t].then))) return o.then();
            while (t--) I(i[t], a(t), o.reject);
            return o.promise()
        }
    });
    var W = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    /**
     * @param e - t Th stack trace that led to the
     * @param t
     */
    S.Deferred.exceptionHook = function(e, t) {
        C.console && C.console.warn && e && W.test(e.name) && C.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t)
        /**
         * Throws an exception in the next timeout.
         * 
         * @param e - The exception to throw
         */
    }, S.readyException = function(e) {
        /**
         * / / object
         */
        C.setTimeout(function() {
            throw e
        })
    };
    var F = S.Deferred();

    /**
     * This is the event listener
     */
    function B() {
        E.removeEventListener("DOMContentLoaded", B), C.removeEventListener("load", B), S.ready()
    }
    /**
     * Wraps a Promises / FulfillablePromise in a promise that will throw the given exception when it's resolved.
     * 
     * @param e - The exception to wrap.
     * 
     * @return { Promise } A promise that will throw the given exception when
     */
    S.fn.ready = function(e) {
        /**
         * @param e
         */
        return F.then(e)["catch"](function(e) {
            S.readyException(e)
        }), this
    }, S.extend({
        isReady: !1,
        readyWait: 1,
        /**
         * @param e
         */
        ready: function(e) {
            (!0 === e ? --S.readyWait : S.isReady) || (S.isReady = !0) !== e && 0 < --S.readyWait || F.resolveWith(E, [S])
        }
    }), S.ready.then = F.then, "complete" === E.readyState || "loading" !== E.readyState && !E.documentElement.doScroll ? C.setTimeout(S.ready) : (E.addEventListener("DOMContentLoaded", B), C.addEventListener("load", B));
    /**
     * Applies changes to the collection to a value before it is inserted into the source document.
     * 
     * @param e - The document to modify.
     * @param t - The function to call before inserting the value.
     * @param n - The value to set or null to use the default.
     * @param r - The function to call before inserting the value.
     * @param i - Whether to insert the value into the source document instead of returning it.
     * @param o - The result of the previous call to this function.
     * @param a - Whether to apply changes to the collection prior to insertion.
     * 
     * @return The value to insert or null
     */
    var $ = function(e, t, n, r, i, o, a) {
            var s = 0,
                u = e.length,
                l = null == n;
            if ("object" === w(n))
                for (s in i = !0, n) $(e, t, s, n[s], !0, o, a);
            /**
             * @param e - t Th type of object to wrap.
             * @param t - n The opions to wrap.
             * @param n
             * 
             * @return The wrapped object wrapped in a Promise
             */
            else if (void 0 !== r && (i = !0, m(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function(e, t, n) {
                    return l.call(S(e), n)
                })), t))
                for (; s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
            return i ? e : l ? t.call(e) : u ? t(e[0], n) : o
        },
        _ = /^-ms-/,
        z = /-([a-z])/g;

    /**
     * Converts a string to upper case.
     * 
     * @param e - The value to convert.
     * @param t - The string to convert.
     * 
     * @return The upper case version of
     */
    function U(e, t) {
        return t.toUpperCase()
    }

    /**
     * Formats a time string to be human readable
     * 
     * @param e - The time string to format
     * 
     * @return { String } The human readable
     */
    function X(e) {
        return e.replace(_, "ms-")
            .replace(z, U)
    }
    /**
     * @param e
     * 
     * @return True if the element is a text node
     */
    var V = function(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType
    };

    /**
     * var S = require ( '. / sprockets')
     */
    function G() {
        this.expando = S.expando + G.uid++
    }
    G.uid = 1, G.prototype = {
        /**
         * @param e
         * 
         * @return { Object } The expando
         */
        cache: function(e) {
            var t = e[this.expando];
            return t || (t = {}, V(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t
        },
        /**
         * @param e - t Th key ( s ) to set or a map of keys to values.
         * @param t - n The value ( s ) o set.
         * @param n
         * 
         * @return The cache for the document
         */
        set: function(e, t, n) {
            var r, i = this.cache(e);
            if ("string" == typeof t) i[X(t)] = n;
            else
                for (r in t) i[X(r)] = t[r];
            return i
        },
        /**
         * @param e - t Th key to look up.
         * @param t
         * 
         * @return { string|undefined } The value of the key
         */
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][X(t)]
        },
        /**
         * @param e - t Th key to store.
         * @param t - n The value o store.
         * @param n
         * 
         * @return The value that was stored
         */
        access: function(e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t)
        },
        /**
         * @param e - t Th expando to remove
         * @param t
         */
        remove: function(e, t) {
            var n, r = e[this.expando];
            if (void 0 !== r) {
                if (void 0 !== t) {
                    n = (t = Array.isArray(t) ? t.map(X) : (t = X(t)) in r ? [t] : t.match(P) || [])
                        .length;
                    while (n--) delete r[t[n]]
                }(void 0 === t || S.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando])
            }
        },
        /**
         * @param e
         * 
         * @return True if the expando is set
         */
        hasData: function(e) {
            var t = e[this.expando];
            return void 0 !== t && !S.isEmptyObject(t)
        }
    };
    var Y = new G,
        Q = new G,
        J = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        K = /[A-Z]/g;

    /**
     * Gets or sets data - * attributes on an element.
     * 
     * @param e - The element to get or set the data - * attribute on.
     * @param t - The name of the data - * attribute to set.
     * @param n - The value to set.
     * 
     * @return { * } The value that was set
     */
    function Z(e, t, n) {
        var r, i;
        if (void 0 === n && 1 === e.nodeType)
            if (r = "data-" + t.replace(K, "-$&")
                .toLowerCase(), "string" == typeof(n = e.getAttribute(r))) {
                try {
                    n = "true" === (i = n) || "false" !== i && ("null" === i ? null : i === +i + "" ? +i : J.test(i) ? JSON.parse(i) : i)
                } catch (e) {}
                Q.set(e, t, n)
            } else n = void 0;
        return n
    }
    S.extend({
        /**
         * @param e
         * 
         * @return True if there is data
         */
        hasData: function(e) {
            return Q.hasData(e) || Y.hasData(e)
        },
        /**
         * @param e - t Th key to look for in the document.
         * @param t - n The name of he field to check.
         * @param n
         * 
         * @return { Promise } A promise that resolves to the value of the field
         */
        data: function(e, t, n) {
            return Q.access(e, t, n)
        },
        /**
         * @param e - t Th type of event
         * @param t
         */
        removeData: function(e, t) {
            Q.remove(e, t)
        },
        /**
         * @param e - t Th key to check.
         * @param t - n The opions to check.
         * @param n
         * 
         * @return Whether the operation succeeded or not
         */
        _data: function(e, t, n) {
            return Y.access(e, t, n)
        },
        /**
         * @param e - t Th type that was removed
         * @param t
         */
        _removeData: function(e, t) {
            Y.remove(e, t)
        }
    }), S.fn.extend({
        /**
         * ( C ) 2003 - 02 - 14 Modernizr Functionality for getting and setting data attributes.
         * 
         * @param n - If set the value of this ` Element ` will be returned. If not specified an array of attributes will be returned.
         * @param e - If specified the value of this ` Element ` will be returned. If not specified an array of attributes will be returned.
         * 
         * @return { Array|Object } If a value is specified it will be returned
         */
        data: function(n, e) {
            var t, r, i, o = this[0],
                a = o && o.attributes;
            if (void 0 === n) {
                if (this.length && (i = Q.get(o), 1 === o.nodeType && !Y.get(o, "hasDataAttrs"))) {
                    t = a.length;
                    while (t--) a[t] && 0 === (r = a[t].name)
                        .indexOf("data-") && (r = X(r.slice(5)), Z(o, r, i[r]));
                    Y.set(o, "hasDataAttrs", !0)
                }
                return i
            }
            /**
             * / / object
             */
            return "object" == typeof n ? this.each(function() {
                Q.set(this, n)
                /**
                 * Sets the value of the ` Document `'s ` _id ` property.
                 * 
                 * @param e - The value to set.
                 * 
                 * @return The value of the ` Document `
                 */
            }) : $(this, function(e) {
                var t;
                if (o && void 0 === e) return void 0 !== (t = Q.get(o, n)) ? t : void 0 !== (t = Z(o, n)) ? t : void 0;
                /**
                 * / / object
                 */
                this.each(function() {
                    Q.set(this, n, e)
                })
            }, null, e, 1 < arguments.length, null, !0)
        },
        /**
         * Removes elements from an array
         * 
         * @param e - The element to remove.
         * 
         * @return { Array } The array
         */
        removeData: function(e) {
            /**
             * / / object
             */
            return this.each(function() {
                Q.remove(this, e)
            })
        }
    }), S.extend({
        /**
         * @param e - t Th name of the queue to get.
         * @param t - n The value ( s ) o add to the queue or null to create a new queue.
         * @param n
         * 
         * @return An array of values that were added
         */
        queue: function(e, t, n) {
            var r;
            if (e) return t = (t || "fx") + "queue", r = Y.get(e, t), n && (!r || Array.isArray(n) ? r = Y.access(e, t, S.makeArray(n)) : r.push(n)), r || []
        },
        /**
         * Queues a task for execution.
         * 
         * @param e - The event to operate on.
         * @param t - The name of the task
         */
        dequeue: function(e, t) {
            t = t || "fx";
            var n = S.queue(e, t),
                r = n.length,
                i = n.shift(),
                o = S._queueHooks(e, t);
            /**
             * / / object
             */
            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, function() {
                S.dequeue(e, t)
            }, o)), !r && o && o.empty.fire()
        },
        /**
         * Returns a hook that will remove all hooks that no longer have access to the queue.
         * 
         * @param e - The event being acted upon.
         * @param t - The name of the queue.
         * 
         * @return A hook that will remove all hooks that no longer have access to the queue
         */
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return Y.get(e, n) || Y.access(e, n, {
                /**
                 * / / object
                 */
                empty: S.Callbacks("once memory")
                    .add(function() {
                        Y.remove(e, [t + "queue", n])
                    })
            })
        }
    }), S.fn.extend({
        /**
         * Queues a method or method name to be executed on the first item in the queue.
         * 
         * @param t - The method or method name to be executed.
         * @param n - If provided specifies the priority of the method.
         * 
         * @return { String|Array } The queue
         */
        queue: function(t, n) {
            var e = 2;
            /**
             * / / object
             */
            return "string" != typeof t && (n = t, t = "fx", e--), arguments.length < e ? S.queue(this[0], t) : void 0 === n ? this : this.each(function() {
                var e = S.queue(this, t, n);
                S._queueHooks(this, t), "fx" === t && "inprogress" !== e[0] && S.dequeue(this, t)
            })
        },
        /**
         * Removes an event from each element
         * 
         * @param e - The event to remove.
         * 
         * @return { Array } The array
         */
        dequeue: function(e) {
            /**
             * / / object
             */
            return this.each(function() {
                S.dequeue(this, e)
            })
        },
        /**
         * @param e
         * 
         * @return { Promise } Resolves when the queue is completed
         */
        clearQueue: function(e) {
            return this.queue(e || "fx", [])
        },
        /**
         * Creates a new ` Deferred ` that will be resolved when all queue hooks have completed.
         * 
         * @param e - The queue hook to use.
         * @param t - The callback to call when the promise is resolved.
         * 
         * @return A new ` Deferred `
         */
        promise: function(e, t) {
            var n, r = 1,
                i = S.Deferred(),
                o = this,
                a = this.length,
                /**
                 * / / object
                 */
                s = function() {
                    --r || i.resolveWith(o, [o])
                };
            "string" != typeof e && (t = e, e = void 0), e = e || "fx";
            while (a--)(n = Y.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s));
            return s(), i.promise(t)
        }
    });
    var ee = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        te = new RegExp("^(?:([+-])=|)(" + ee + ")([a-z%]*)$", "i"),
        ne = ["Top", "Right", "Bottom", "Left"],
        re = E.documentElement,
        /**
         * @param e
         * 
         * @return { boolean } True if the element is in the DOM
         */
        ie = function(e) {
            return S.contains(e.ownerDocument, e)
        },
        oe = {
            composed: !0
        };
    /**
     * @param e
     * 
     * @return { boolean } ` true ` if the element is contained within the document
     */
    re.getRootNode && (ie = function(e) {
        return S.contains(e.ownerDocument, e) || e.getRootNode(oe) === e.ownerDocument
    });
    /**
     * @param e - t Th element to check.
     * @param t
     * 
     * @return True if the element is visible
     */
    var ae = function(e, t) {
        return "none" === (e = t || e)
            .style.display || "" === e.style.display && ie(e) && "none" === S.css(e, "display")
    };

    /**
     * Applies the given CSS property to the given element.
     * 
     * @param e - The element to apply the property to.
     * @param t - The name of the CSS property to apply.
     * @param n - An optional array of pre - computed values to set on the property.
     * @param r - An optional reference to the document to use for progress notifications.
     * 
     * @return True if the property was applied
     */
    function se(e, t, n, r) {
        var i, o, a = 20,
            /**
             * @return { Object } The current
             */
            s = r ? function() {
                return r.cur()
                /**
                 * @return { String } The value of the selector
                 */
            } : function() {
                return S.css(e, t, "")
            },
            u = s(),
            l = n && n[3] || (S.cssNumber[t] ? "" : "px"),
            c = e.nodeType && (S.cssNumber[t] || "px" !== l && +u) && te.exec(S.css(e, t));
        if (c && c[3] !== l) {
            u /= 2, l = l || c[3], c = +u || 1;
            while (a--) S.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;
            c *= 2, S.style(e, t, c + l), n = n || []
        }
        return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i
    }
    var ue = {};

    /**
     * Checks an array of HTMLElements for display : none and / or display : none.
     * 
     * @param e - The HTMLElements to check.
     * @param t - Whether to check display : none.
     * 
     * @return { Boolean } True if the elements are supported
     */
    function le(e, t) {
        for (var n, r, i, o, a, s, u, l = [], c = 0, f = e.length; c < f; c++)(r = e[c])
            .style && (n = r.style.display, t ? ("none" === n && (l[c] = Y.get(r, "display") || null, l[c] || (r.style.display = "")), "" === r.style.display && ae(r) && (l[c] = (u = a = o = void 0, a = (i = r)
                .ownerDocument, s = i.nodeName, (u = ue[s]) || (o = a.body.appendChild(a.createElement(s)), u = S.css(o, "display"), o.parentNode.removeChild(o), "none" === u && (u = "block"), ue[s] = u)))) : "none" !== n && (l[c] = "none", Y.set(r, "display", n)));
        for (c = 0; c < f; c++) null != l[c] && (e[c].style.display = l[c]);
        return e
    }
    S.fn.extend({
        /**
         * @return { Boolean } true if
         */
        show: function() {
            return le(this, !0)
        },
        /**
         * @return { Object } An object representing the contents of this
         */
        hide: function() {
            return le(this)
        },
        /**
         * Shows or hides elements based on value
         * 
         * @param e - If truthy the element will be shown. If falsy the element will be hidden.
         * 
         * @return { Boolean } True if elements were shown false
         */
        toggle: function(e) {
            /**
             * / / object
             */
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                ae(this) ? S(this)
                    .show() : S(this)
                    .hide()
            })
        }
    });
    var ce, fe, pe = /^(?:checkbox|radio)$/i,
        de = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i,
        he = /^$|^module$|\/(?:java|ecma)script/i;
    ce = E.createDocumentFragment()
        .appendChild(E.createElement("div")), (fe = E.createElement("input"))
        .setAttribute("type", "radio"), fe.setAttribute("checked", "checked"), fe.setAttribute("name", "t"), ce.appendChild(fe), y.checkClone = ce.cloneNode(!0)
        .cloneNode(!0)
        .lastChild.checked, ce.innerHTML = "<textarea>x</textarea>", y.noCloneChecked = !!ce.cloneNode(!0)
        .lastChild.defaultValue, ce.innerHTML = "<option></option>", y.option = !!ce.lastChild;
    var ge = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };

    /**
     * Returns all elements that match the given selector.
     * 
     * @param e - The element to search within.
     * @param t - The selector to match.
     * 
     * @return An array of elements that match the given selector
     */
    function ve(e, t) {
        var n;
        return n = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [], void 0 === t || t && A(e, t) ? S.merge([e], n) : n
    }

    /**
     * Sets or unsets globalEval on an array of script elements.
     * 
     * @param e - Array of script elements to set or unset.
     * @param t - Array of script elements to unset
     */
    function ye(e, t) {
        for (var n = 0, r = e.length; n < r; n++) Y.set(e[n], "globalEval", !t || Y.get(t[n], "globalEval"))
    }
    ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td, y.option || (ge.optgroup = ge.option = [1, "<select multiple='multiple'>", "</select>"]);
    var me = /<|&#?\w+;/;

    /**
     * Serializes and optionally deserializes data to a DOM.
     * 
     * @param e - The data to serialize and deserialize.
     * @param t - The root DOM node to serialize to.
     * @param n - The number of top level elements in the document being serialized.
     * @param r - The number of levels to retain before serializing.
     * @param i - The number of levels to retain after serializing.
     * 
     * @return The serialized data that was passed
     */
    function xe(e, t, n, r, i) {
        for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++)
            if ((o = e[d]) || 0 === o)
                if ("object" === w(o)) S.merge(p, o.nodeType ? [o] : o);
                else if (me.test(o)) {
            a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || ["", ""])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + S.htmlPrefilter(o) + u[2], c = u[0];
            while (c--) a = a.lastChild;
            S.merge(p, a.childNodes), (a = f.firstChild)
                .textContent = ""
        } else p.push(t.createTextNode(o));
        f.textContent = "", d = 0;
        while (o = p[d++])
            if (r && -1 < S.inArray(o, r)) i && i.push(o);
            else if (l = ie(o), a = ve(f.appendChild(o), "script"), l && ye(a), n) {
            c = 0;
            while (o = a[c++]) he.test(o.type || "") && n.push(o)
        }
        return f
    }
    var be = /^([^.]*)(?:\.(.+)|)/;

    /**
     * Checks if we're in the middle of a round.
     * 
     * 
     * @return { boolean } true if we
     */
    function we() {
        return !0
    }

    /**
     * This is a test for the T - E condition.
     * 
     * 
     * @return { boolean } True if
     */
    function Te() {
        return !1
    }

    /**
     * Checks whether or not the given event is a match for the given type.
     * 
     * @param e - The event to check.
     * @param t - The type to check against.
     * 
     * @return True if the event matches
     */
    function Ce(e, t) {
        /**
         * @return { HTMLElement } The active element
         */
        return e === function() {
            try {
                return E.activeElement
            } catch (e) {}
        }() == ("focus" === t)
    }

    /**
     * Attaches event listeners to a set of events.
     * 
     * @param e - The event source to attach to.
     * @param t - The event target or an object with event names as keys and event listeners as values.
     * @param n - The event target or null to use the default.
     * @param r - The event target or null to use the default.
     * @param i - The event target or null to use the default.
     * @param o - If provided a callback function will be returned that will be called when the event is fired.
     * 
     * @return The event source for chaining
     */
    function Ee(e, t, n, r, i, o) {
        var a, s;
        if ("object" == typeof t) {
            for (s in "string" != typeof n && (r = r || n, n = void 0), t) Ee(e, s, n, r, t[s], o);
            return e
        }
        if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Te;
        else if (!i) return e;
        /**
         * @param e
         * 
         * @return { Function } Resolves to ` this `
         */
        return 1 === o && (a = i, (i = function(e) {
                return S()
                    .off(e), a.apply(this, arguments)
                /**
                 * / / object
                 */
            })
            .guid = a.guid || (a.guid = S.guid++)), e.each(function() {
            S.event.add(this, t, i, r, n)
        })
    }

    /**
     * Attaches event handler to a component
     * 
     * @param e - The event object to attach the handler to
     * @param i - The name of the property
     * @param o - The function to call when the event is triggered
     * 
     * @return { Object } The event
     */
    function Se(e, i, o) {
        o ? (Y.set(e, i, !1), S.event.add(e, i, {
            namespace: !1,
            /**
             * @param e
             * 
             * @return { boolean } True if the event was handled
             */
            handler: function(e) {
                var t, n, r = Y.get(this, i);
                if (1 & e.isTrigger && this[i]) {
                    if (r.length)(S.event.special[i] || {})
                        .delegateType && e.stopPropagation();
                    else if (r = s.call(arguments), Y.set(this, i, r), t = o(this, i), this[i](), r !== (n = Y.get(this, i)) || t ? Y.set(this, i, !1) : n = {}, r !== n) return e.stopImmediatePropagation(), e.preventDefault(), n && n.value
                } else r.length && (Y.set(this, i, {
                    value: S.event.trigger(S.extend(r[0], S.Event.prototype), r.slice(1), this)
                }), e.stopImmediatePropagation())
            }
        })) : void 0 === Y.get(e, i) && S.event.add(e, i, we)
    }
    S.event = {
        global: {},
        /**
         * Adds a listener to the event object.
         * 
         * @param t - The listener to add the listener to.
         * @param e - The event pattern to match.
         * @param n - The event data to pass to the listener.
         * @param r - The event target to match.
         * @param i - The event target to match.
         * 
         * @return { Object } The listener object
         */
        add: function(t, e, n, r, i) {
            var o, a, s, u, l, c, f, p, d, h, g, v = Y.get(t);
            if (V(t)) {
                /**
                 * @param e
                 * 
                 * @return The result of the event
                 */
                n.handler && (n = (o = n)
                        .handler, i = o.selector), i && S.find.matchesSelector(re, i), n.guid || (n.guid = S.guid++), (u = v.events) || (u = v.events = Object.create(null)), (a = v.handle) || (a = v.handle = function(e) {
                        return "undefined" != typeof S && S.event.triggered !== e.type ? S.event.dispatch.apply(t, arguments) : void 0
                    }), l = (e = (e || "")
                        .match(P) || [""])
                    .length;
                while (l--) d = g = (s = be.exec(e[l]) || [])[1], h = (s[2] || "")
                    .split(".")
                    .sort(), d && (f = S.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = S.event.special[d] || {}, c = S.extend({
                        type: d,
                        origType: g,
                        data: r,
                        handler: n,
                        guid: n.guid,
                        selector: i,
                        needsContext: i && S.expr.match.needsContext.test(i),
                        namespace: h.join(".")
                    }, o), (p = u[d]) || ((p = u[d] = [])
                        .delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, h, a) || t.addEventListener && t.addEventListener(d, a)), f.add && (f.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), S.event.global[d] = !0)
            }
        },
        /**
         * @param e - t Th event special types to check.
         * @param t - n The even target name.
         * @param n - r Whether or ot to check delegate type.
         * @param r - i Tue if event is triggered
         * @param i
         */
        remove: function(e, t, n, r, i) {
            var o, a, s, u, l, c, f, p, d, h, g, v = Y.hasData(e) && Y.get(e);
            if (v && (u = v.events)) {
                l = (t = (t || "")
                        .match(P) || [""])
                    .length;
                while (l--)
                    if (d = g = (s = be.exec(t[l]) || [])[1], h = (s[2] || "")
                        .split(".")
                        .sort(), d) {
                        f = S.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length;
                        while (o--) c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
                        a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, v.handle) || S.removeEvent(e, d, v.handle), delete u[d])
                    } else
                        for (d in u) S.event.remove(e, d + t[l], n, r, !0);
                S.isEmptyObject(u) && Y.remove(e, "handle events")
            }
        },
        /**
         * @param e
         * 
         * @return { Object } The event object
         */
        dispatch: function(e) {
            var t, n, r, i, o, a, s = new Array(arguments.length),
                u = S.event.fix(e),
                l = (Y.get(this, "events") || Object.create(null))[u.type] || [],
                c = S.event.special[u.type] || {};
            for (s[0] = u, t = 1; t < arguments.length; t++) s[t] = arguments[t];
            if (u.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, u)) {
                a = S.event.handlers.call(this, u, l), t = 0;
                while ((i = a[t++]) && !u.isPropagationStopped()) {
                    u.currentTarget = i.elem, n = 0;
                    while ((o = i.handlers[n++]) && !u.isImmediatePropagationStopped()) u.rnamespace && !1 !== o.namespace && !u.rnamespace.test(o.namespace) || (u.handleObj = o, u.data = o.data, void 0 !== (r = ((S.event.special[o.origType] || {})
                            .handle || o.handler)
                        .apply(i.elem, s)) && !1 === (u.result = r) && (u.preventDefault(), u.stopPropagation()))
                }
                return c.postDispatch && c.postDispatch.call(this, u), u.result
            }
        },
        /**
         * @param e - t Dlegation handlers to be applied to the event.
         * @param t
         * 
         * @return { Object } Object containing delegated listeners
         */
        handlers: function(e, t) {
            var n, r, i, o, a, s = [],
                u = t.delegateCount,
                l = e.target;
            if (u && l.nodeType && !("click" === e.type && 1 <= e.button))
                for (; l !== this; l = l.parentNode || this)
                    if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
                        for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = (r = t[n])
                            .selector + " "] && (a[i] = r.needsContext ? -1 < S(i, this)
                            .index(l) : S.find(i, this, null, [l])
                            .length), a[i] && o.push(r);
                        o.length && s.push({
                            elem: l,
                            handlers: o
                        })
                    } return l = this, u < t.length && s.push({
                elem: l,
                handlers: t.slice(u)
            }), s
        },
        /**
         * Sets the property on S. Event. prototype that returns the value of the property
         * 
         * @param t - The name of the property
         * @param e - The value to set the property to
         * 
         * @return { Object } The value of
         */
        addProp: function(t, e) {
            Object.defineProperty(S.Event.prototype, t, {
                enumerable: !0,
                configurable: !0,
                /**
                 * @return { Object } The event
                 */
                get: m(e) ? function() {
                    if (this.originalEvent) return e(this.originalEvent)
                    /**
                     * @return { Object } The event
                     */
                } : function() {
                    if (this.originalEvent) return this.originalEvent[t]
                },
                /**
                 * @param e
                 */
                set: function(e) {
                    Object.defineProperty(this, t, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: e
                    })
                }
            })
        },
        /**
         * @param e
         * 
         * @return { Object } The wrapped event
         */
        fix: function(e) {
            return e[S.expando] ? e : new S.Event(e)
        },
        special: {
            load: {
                noBubble: !0
            },
            click: {
                /**
                 * @param e
                 * 
                 * @return True if the event is a click event
                 */
                setup: function(e) {
                    var t = this || e;
                    return pe.test(t.type) && t.click && A(t, "input") && Se(t, "click", we), !1
                },
                /**
                 * @param e
                 * 
                 * @return True if the event is a click event
                 */
                trigger: function(e) {
                    var t = this || e;
                    return pe.test(t.type) && t.click && A(t, "input") && Se(t, "click"), !0
                },
                /**
                 * @param e
                 * 
                 * @return True if the event is a click event
                 */
                _default: function(e) {
                    var t = e.target;
                    return pe.test(t.type) && t.click && A(t, "input") && Y.get(t, "click") || A(t, "a")
                }
            },
            beforeunload: {
                /**
                 * @param e
                 */
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result)
                }
            }
        }
        /**
         * @param e - t Evnt name to remove.
         * @param t - n Even listener to remove
         * @param n
         */
    }, S.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n)
        /**
         * @param e - t An optional hash of proprties to merge with the defaultPrevented and currentTarget properties.
         * @param t
         * 
         * @return The newly created ` Event `
         */
    }, S.Event = function(e, t) {
        if (!(this instanceof S.Event)) return new S.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? we : Te, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && S.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[S.expando] = !0
    }, S.Event.prototype = {
        constructor: S.Event,
        isDefaultPrevented: Te,
        isPropagationStopped: Te,
        isImmediatePropagationStopped: Te,
        isSimulated: !1,
        /**
         * / / object
         */
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = we, e && !this.isSimulated && e.preventDefault()
        },
        /**
         * / / object
         */
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = we, e && !this.isSimulated && e.stopPropagation()
        },
        /**
         * / / object
         */
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = we, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation()
        }
    }, S.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        "char": !0,
        code: !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: !0
    }, S.event.addProp), S.each({
        focus: "focusin",
        blur: "focusout"
        /**
         * Adds a special event to Soneypants that delegates events to a specific type.
         * 
         * @param e - The name of the event to add.
         * @param t - The type of delegate to delegate to.
         * 
         * @return { Object } The newly added special event
         */
    }, function(e, t) {
        S.event.special[e] = {
            /**
             * @return { boolean } true if
             */
            setup: function() {
                return Se(this, e, Ce), !1
            },
            /**
             * @return true if there is a change
             */
            trigger: function() {
                return Se(this, e), !0
            },
            /**
             * @return { boolean } true if
             */
            _default: function() {
                return !0
            },
            delegateType: t
        }
    }), S.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
        /**
         * Adds a special event handler that delegates events to a specific type.
         * 
         * @param e - The event to add the special handler for.
         * @param i - The type to delegate the event to.
         * 
         * @return { Object } The new event handler
         */
    }, function(e, i) {
        S.event.special[e] = {
            delegateType: i,
            bindType: i,
            /**
             * @param e
             * 
             * @return { Boolean|Object } Whether the event was handled
             */
            handle: function(e) {
                var t, n = e.relatedTarget,
                    r = e.handleObj;
                return n && (n === this || S.contains(this, n)) || (e.type = r.origType, t = r.handler.apply(this, arguments), e.type = i), t
            }
        }
    }), S.fn.extend({
        /**
         * @param e - t Th key that will be used to determine the origin of the mutation.
         * @param t - n The muation index to use for this mutation.
         * @param n - r The mutatio size to use for this mutation.
         * @param r
         * 
         * @return A new ` Mutation ` instance
         */
        on: function(e, t, n, r) {
            return Ee(this, e, t, n, r)
        },
        /**
         * @param e - t Th key that will be used to determine when events are sent to the server.
         * @param t - n The number of evens to send per batch.
         * @param n - r The umber of batched events to send per batch.
         * @param r
         * 
         * @return { Promise } A Promise that resolves to the result of the mutation
         */
        one: function(e, t, n, r) {
            return Ee(this, e, t, n, r, 1)
        },
        /**
         * Removes event listeners from the target element.
         * 
         * @param e - The event to remove or an object with event listeners
         * @param t - The event target to remove
         * @param n - The event target to remove
         * 
         * @return { Object } The instance of this
         */
        off: function(e, t, n) {
            var r, i;
            if (e && e.preventDefault && e.handleObj) return r = e.handleObj, S(e.delegateTarget)
                .off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this;
            if ("object" == typeof e) {
                for (i in e) this.off(i, t, e[i]);
                return this
            }
            /**
             * / / object
             */
            return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = Te), this.each(function() {
                S.event.remove(this, e, n, t)
            })
        }
    });
    // This file is part of Kasper's BSD license. Kasper is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 3 of the License or ( at your option ) any later version. Kasper is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details
    var ke = /<script|<style|<link/i,
        Ae = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Ne = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    /**
     * Returns the table that contains the given element or the element itself if it doesn't exist.
     * 
     * @param e - The element to examine.
     * @param t - The table to examine.
     * 
     * @return The table that contains the element
     */
    function je(e, t) {
        return A(e, "table") && A(11 !== t.nodeType ? t : t.firstChild, "tr") && S(e)
            .children("tbody")[0] || e
    }

    /**
     * Wraps an event in a type attribute.
     * 
     * @param e - The event to wrap.
     * 
     * @return The wrapped event with type
     */
    function De(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e
    }

    /**
     * Removes type attribute from an event
     * 
     * @param e - The event to be modified
     * 
     * @return { Object } The modified
     */
    function qe(e) {
        return "true/" === (e.type || "")
            .slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), e
    }

    /**
     * Sets event handlers on document.
     * 
     * @param e - The document to watch.
     * @param t - The event handler object
     */
    function Le(e, t) {
        var n, r, i, o, a, s;
        if (1 === t.nodeType) {
            if (Y.hasData(e) && (s = Y.get(e)
                    .events))
                for (i in Y.remove(t, "handle events"), s)
                    for (n = 0, r = s[i].length; n < r; n++) S.event.add(t, i, s[i][n]);
            Q.hasData(e) && (o = Q.access(e), a = S.extend({}, o), Q.set(t, a))
        }
    }

    /**
     * Applies one or more changes to the document.
     * 
     * @param n - The nodes to apply the changes to.
     * @param r - The changes to apply.
     * @param i - The index of the document to apply the changes to.
     * @param o - If true the changes will be applied to the document as part of the merge operation.
     * 
     * @return The document with the changes applied
     */
    function He(n, r, i, o) {
        r = g(r);
        var e, t, a, s, u, l, c = 0,
            f = n.length,
            p = f - 1,
            d = r[0],
            h = m(d);
        /**
         * @param e
         */
        if (h || 1 < f && "string" == typeof d && !y.checkClone && Ae.test(d)) return n.each(function(e) {
            var t = n.eq(e);
            h && (r[0] = d.call(this, e, t.html())), He(t, r, i, o)
        });
        if (f && (t = (e = xe(r, n[0].ownerDocument, !1, n, o))
                .firstChild, 1 === e.childNodes.length && (e = t), t || o)) {
            for (s = (a = S.map(ve(e, "script"), De))
                .length; c < f; c++) u = e, c !== p && (u = S.clone(u, !0, !0), s && S.merge(a, ve(u, "script"))), i.call(n[c], u, c);
            if (s)
                for (l = a[a.length - 1].ownerDocument, S.map(a, qe), c = 0; c < s; c++) u = a[c], he.test(u.type || "") && !Y.access(u, "globalEval") && S.contains(l, u) && (u.src && "module" !== (u.type || "")
                    .toLowerCase() ? S._evalUrl && !u.noModule && S._evalUrl(u.src, {
                        nonce: u.nonce || u.getAttribute("nonce")
                    }, l) : b(u.textContent.replace(Ne, ""), u, l))
        }
        return n
    }

    /**
     * Removes from the DOM all document elements matching the given set of selectors.
     * 
     * @param e - The set of selectors to remove.
     * @param t - The filter to apply to the set of selectors.
     * @param n - Whether to clean the DOM before removing the matched elements.
     * 
     * @return The set of selectors that were removed
     */
    function Oe(e, t, n) {
        for (var r, i = t ? S.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || S.cleanData(ve(r)), r.parentNode && (n && ie(r) && ye(ve(r, "script")), r.parentNode.removeChild(r));
        return e
    }
    S.extend({
        /**
         * @param e
         * 
         * @return { * } The value
         */
        htmlPrefilter: function(e) {
            return e
        },
        /**
         * @param e - t Whther to process checked and default values.
         * @param t - n Wheher to process non - default values.
         * @param n
         * 
         * @return The modified element or null if there was no change
         */
        clone: function(e, t, n) {
            var r, i, o, a, s, u, l, c = e.cloneNode(!0),
                f = ie(e);
            if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || S.isXMLDoc(e)))
                for (a = ve(c), r = 0, i = (o = ve(e))
                    .length; r < i; r++) s = o[r], u = a[r], void 0, "input" === (l = u.nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : "input" !== l && "textarea" !== l || (u.defaultValue = s.defaultValue);
            if (t)
                if (n)
                    for (o = o || ve(e), a = a || ve(c), r = 0, i = o.length; r < i; r++) Le(o[r], a[r]);
                else Le(e, c);
            return 0 < (a = ve(c, "script"))
                .length && ye(a, !f && ve(e, "script")), c
        },
        /**
         * @param e
         */
        cleanData: function(e) {
            for (var t, n, r, i = S.event.special, o = 0; void 0 !== (n = e[o]); o++)
                if (V(n)) {
                    if (t = n[Y.expando]) {
                        if (t.events)
                            for (r in t.events) i[r] ? S.event.remove(n, r) : S.removeEvent(n, r, t.handle);
                        n[Y.expando] = void 0
                    }
                    n[Q.expando] && (n[Q.expando] = void 0)
                }
        }
    }), S.fn.extend({
        /**
         * @param e
         * 
         * @return { Oe } The event
         */
        detach: function(e) {
            return Oe(this, e, !0)
        },
        /**
         * @param e
         * 
         * @return { Oe } The instance
         */
        remove: function(e) {
            return Oe(this, e)
        },
        /**
         * Get or set the text content of this element.
         * 
         * @param e - If specified the text content of this element will be set. If not specified the text content of the current element will be returned.
         * 
         * @return A jQuery object that can be used to manipulate the DOM
         */
        text: function(e) {
            /**
             * Returns the text content of this element or all elements if no argument is given.
             * 
             * @param e - The text content to set or undefined to return all elements.
             * 
             * @return The text content of this element
             */
            return $(this, function(e) {
                /**
                 * / / object
                 */
                return void 0 === e ? S.text(this) : this.empty()
                    .each(function() {
                        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e)
                    })
            }, null, e, arguments.length)
        },
        /**
         * Appends an element to the end of this node's children.
         * 
         * 
         * @return The node that was appended
         */
        append: function() {
            /**
             * @param e
             */
            return He(this, arguments, function(e) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || je(this, e)
                    .appendChild(e)
            })
        },
        /**
         * Inserts the given element ( s ) at the end of the current node's children.
         * 
         * 
         * @return The document for chaining method calls
         */
        prepend: function() {
            /**
             * @param e
             */
            return He(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = je(this, e);
                    t.insertBefore(e, t.firstChild)
                }
            })
        },
        /**
         * Insert an element before this element.
         * 
         * 
         * @return The element that was inserted
         */
        before: function() {
            /**
             * @param e
             */
            return He(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this)
            })
        },
        /**
         * ( C ) 2003 John Resig This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 3 of the License or ( at your option ) any later version. This program is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the
         * 
         * 
         * @return The new Element with the specified elements
         */
        after: function() {
            /**
             * @param e
             */
            return He(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)
            })
        },
        /**
         * @return { Array } The array
         */
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (S.cleanData(ve(e, !1)), e.textContent = "");
            return this
        },
        /**
         * Combines all elements in the collection with the given value.
         * 
         * @param e - The value to merge into the collection.
         * @param t - The value to merge into the collection.
         * 
         * @return { Array } The merged collection
         */
        clone: function(e, t) {
            /**
             * @return { Object } A clone of this
             */
            return e = null != e && e, t = null == t ? e : t, this.map(function() {
                return S.clone(this, e, t)
            })
        },
        /**
         * Returns the innerHTML of the node ( s ) or appends it if no argument is given.
         * 
         * @param e - The HTML to be inserted.
         */
        html: function(e) {
            /**
             * @param e
             * 
             * @return If no arguments are given the innerHTML of the container is returned. If a string is given and the container
             */
            return $(this, function(e) {
                var t = this[0] || {},
                    n = 0,
                    r = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !ke.test(e) && !ge[(de.exec(e) || ["", ""])[1].toLowerCase()]) {
                    e = S.htmlPrefilter(e);
                    try {
                        for (; n < r; n++) 1 === (t = this[n] || {})
                            .nodeType && (S.cleanData(ve(t, !1)), t.innerHTML = e);
                        t = 0
                    } catch (e) {}
                }
                t && this.empty()
                    .append(e)
            }, null, e, arguments.length)
        },
        /**
         * Replaces the given elements with the ones passed as arguments.
         * 
         * 
         * @return The document that was passed
         */
        replaceWith: function() {
            var n = [];
            /**
             * @param e
             */
            return He(this, arguments, function(e) {
                var t = this.parentNode;
                S.inArray(this, n) < 0 && (S.cleanData(ve(this)), t && t.replaceChild(e, this))
            }, n)
        }
    }), S.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
        /**
         * Adds a method to the collection that will be called for each item in the collection.
         * 
         * @param e - The name of the collection to add the method to.
         * @param a - The name of the method to call.
         * 
         * @return { Collection } The collection
         */
    }, function(e, a) {
        /**
         * @param e
         * 
         * @return { PushStream } The push
         */
        S.fn[e] = function(e) {
            for (var t, n = [], r = S(e), i = r.length - 1, o = 0; o <= i; o++) t = o === i ? this : this.clone(!0), S(r[o])[a](t), u.apply(n, t.get());
            return this.pushStack(n)
        }
    });
    var Pe = new RegExp("^(" + ee + ")(?!px)[a-z%]+$", "i"),
        /**
         * @param e
         * 
         * @return { String } The computed style
         */
        Re = function(e) {
            var t = e.ownerDocument.defaultView;
            return t && t.opener || (t = C), t.getComputedStyle(e)
        },
        /**
         * @param e - t Styl properties to apply to the element.
         * @param t - n Funcion to apply to the element before applying the new styles.
         * @param n
         * 
         * @return Returns the value of n
         */
        Me = function(e, t, n) {
            var r, i, o = {};
            for (i in t) o[i] = e.style[i], e.style[i] = t[i];
            for (i in r = n.call(e), t) e.style[i] = o[i];
            return r
        },
        Ie = new RegExp(ne.join("|"), "i");

    /**
     * Returns the value of a CSS property for the given element.
     * 
     * @param e - The element to query.
     * @param t - The name of the property to get.
     * @param n - The value to use if none is provided.
     * 
     * @return { string } The value of the property
     */
    function We(e, t, n) {
        var r, i, o, a, s = e.style;
        return (n = n || Re(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || ie(e) || (a = S.style(e, t)), !y.pixelBoxStyles() && Pe.test(a) && Ie.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a
    }

    /**
     * Creates a property accessor that delegates to the given function if the given object doesn't already have one.
     * 
     * @param e - The object to wrap.
     * @param t - The function to wrap.
     * 
     * @return { Object } The property accessor
     */
    function Fe(e, t) {
        return {
            /**
             * @return { Object } The value to retrieve
             */
            get: function() {
                if (!e()) return (this.get = t)
                    .apply(this, arguments);
                delete this.get
            }
        }
        /**
         * Updates the scroll position to the current location.
         * 
         * 
         * @return { boolean } true if the scroll position changed
         */
    }! function() {
        /**
         * ( Re ) create element
         */
        function e() {
            if (l) {
                u.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", l.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", re.appendChild(u)
                    .appendChild(l);
                var e = C.getComputedStyle(l);
                n = "1%" !== e.top, s = 12 === t(e.marginLeft), l.style.right = "60%", o = 36 === t(e.right), r = 36 === t(e.width), l.style.position = "absolute", i = 12 === t(l.offsetWidth / 3), re.removeChild(u), l = null
            }
        }

        /**
         * Converts a number to a float
         * 
         * @param e - The number to convert.
         * 
         * @return { number } The converted number
         */
        function t(e) {
            return Math.round(parseFloat(e))
        }
        var n, r, i, o, a, s, u = E.createElement("div"),
            l = E.createElement("div");
        l.style && (l.style.backgroundClip = "content-box", l.cloneNode(!0)
            .style.backgroundClip = "", y.clearCloneStyle = "content-box" === l.style.backgroundClip, S.extend(y, {
                /**
                 * @return { Object } The object
                 */
                boxSizingReliable: function() {
                    return e(), r
                },
                /**
                 * @return { Object } the object
                 */
                pixelBoxStyles: function() {
                    return e(), o
                },
                /**
                 * @return { Object } the object
                 */
                pixelPosition: function() {
                    return e(), n
                },
                /**
                 * @return { Object } the object
                 */
                reliableMarginLeft: function() {
                    return e(), s
                },
                /**
                 * @return { Object } the object
                 */
                scrollboxSize: function() {
                    return e(), i
                },
                /**
                 * @return { boolean } true if
                 */
                reliableTrDimensions: function() {
                    var e, t, n, r;
                    return null == a && (e = E.createElement("table"), t = E.createElement("tr"), n = E.createElement("div"), e.style.cssText = "position:absolute;left:-11111px;border-collapse:separate", t.style.cssText = "border:1px solid", t.style.height = "1px", n.style.height = "9px", n.style.display = "block", re.appendChild(e)
                        .appendChild(t)
                        .appendChild(n), r = C.getComputedStyle(t), a = parseInt(r.height, 10) + parseInt(r.borderTopWidth, 10) + parseInt(r.borderBottomWidth, 10) === t.offsetHeight, re.removeChild(e)), a
                }
            }))
    }();
    var Be = ["Webkit", "Moz", "ms"],
        $e = E.createElement("div")
        .style,
        _e = {};

    /**
     * Returns the value of the given property.
     * 
     * @param e - The property to get the value of.
     * 
     * @return The value of the given property
     */
    function ze(e) {
        var t = S.cssProps[e] || _e[e];
        /**
         * @param e
         * 
         * @return { String } The event name
         */
        return t || (e in $e ? e : _e[e] = function(e) {
            var t = e[0].toUpperCase() + e.slice(1),
                n = Be.length;
            while (n--)
                if ((e = Be[n] + t) in $e) return e
        }(e) || e)
    }
    var Ue = /^(none|table(?!-c[ea]).+)/,
        Xe = /^--/,
        Ve = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Ge = {
            letterSpacing: "0",
            fontWeight: "400"
        };

    /**
     * Checks if the text can be converted to a percentage.
     * 
     * @param e - The value to check.
     * @param t - The text to check.
     * @param n - The percentage to adjust the text by.
     * 
     * @return { string } The converted text
     */
    function Ye(e, t, n) {
        var r = te.exec(t);
        return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t
    }

    /**
     * Calculates and returns the amount of CSS space consumed by a border or content.
     * 
     * @param e - The element to examine.
     * @param t - The value of the " width " or " margin " property.
     * @param n - The value of the " content " or " margin " property.
     * @param r - Whether or not to consider the border width or margin as part of the value.
     * @param i - The index of the current style.
     * @param o - The options passed to SSR.
     * 
     * @return The amount of CSS space consumed
     */
    function Qe(e, t, n, r, i, o) {
        var a = "width" === t ? 1 : 0,
            s = 0,
            u = 0;
        if (n === (r ? "border" : "content")) return 0;
        for (; a < 4; a += 2) "margin" === n && (u += S.css(e, n + ne[a], !0, i)), r ? ("content" === n && (u -= S.css(e, "padding" + ne[a], !0, i)), "margin" !== n && (u -= S.css(e, "border" + ne[a] + "Width", !0, i))) : (u += S.css(e, "padding" + ne[a], !0, i), "padding" !== n ? u += S.css(e, "border" + ne[a] + "Width", !0, i) : s += S.css(e, "border" + ne[a] + "Width", !0, i));
        return !r && 0 <= o && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5)) || 0), u
    }

    /**
     * Determines whether the given element should be treated as a tr element.
     * 
     * @param e - The element to check.
     * @param t - The offset to use for determining the tr element's position.
     * @param n - Whether to consider boxSizingReliable.
     * 
     * @return { boolean } True if the element should be treated as a tr element
     */
    function Je(e, t, n) {
        var r = Re(e),
            i = (!y.boxSizingReliable() || n) && "border-box" === S.css(e, "boxSizing", !1, r),
            o = i,
            a = We(e, t, r),
            s = "offset" + t[0].toUpperCase() + t.slice(1);
        if (Pe.test(a)) {
            if (!n) return a;
            a = "auto"
        }
        return (!y.boxSizingReliable() && i || !y.reliableTrDimensions() && A(e, "tr") || "auto" === a || !parseFloat(a) && "inline" === S.css(e, "display", !1, r)) && e.getClientRects()
            .length && (i = "border-box" === S.css(e, "boxSizing", !1, r), (o = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + Qe(e, t, n || (i ? "border" : "content"), o, r, a) + "px"
    }

    /**
     * Creates a new instance of Ke.
     * 
     * @param e - The event handler to use for this instance.
     * @param t - The name of the attribute to store the value in.
     * @param n - The name of the attribute to store the value in.
     * @param r - The value to store in the attribute.
     * @param i - The index of the attribute to store in the attribute.
     * 
     * @return The newly created instance of Ke
     */
    function Ke(e, t, n, r, i) {
        return new Ke.prototype.init(e, t, n, r, i)
    }
    S.extend({
            cssHooks: {
                opacity: {
                    /**
                     * @param e - t Tru if opacity should be returned.
                     * @param t
                     * 
                     * @return { string } Opacity of element
                     */
                    get: function(e, t) {
                        if (t) {
                            var n = We(e, "opacity");
                            return "" === n ? "1" : n
                        }
                    }
                }
            },
            cssNumber: {
                animationIterationCount: !0,
                columnCount: !0,
                fillOpacity: !0,
                flexGrow: !0,
                flexShrink: !0,
                fontWeight: !0,
                gridArea: !0,
                gridColumn: !0,
                gridColumnEnd: !0,
                gridColumnStart: !0,
                gridRow: !0,
                gridRowEnd: !0,
                gridRowStart: !0,
                lineHeight: !0,
                opacity: !0,
                order: !0,
                orphans: !0,
                widows: !0,
                zIndex: !0,
                zoom: !0
            },
            cssProps: {},
            /**
             * @param e - t Th property to get or set.
             * @param t - n The value o set the property to.
             * @param n - r If true retrieve the property with the give name rather than relying on the value being set.
             * @param r
             * 
             * @return The value of the property
             */
            style: function(e, t, n, r) {
                if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                    var i, o, a, s = X(t),
                        u = Xe.test(t),
                        l = e.style;
                    if (u || (t = ze(s)), a = S.cssHooks[t] || S.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
                    "string" === (o = typeof n) && (i = te.exec(n)) && i[1] && (n = se(e, t, i), o = "number"), null != n && n == n && ("number" !== o || u || (n += i && i[3] || (S.cssNumber[s] ? "" : "px")), y.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n))
                }
            },
            /**
             * @param e - t Th property to query for.
             * @param t - n If provided he value to return for the property.
             * @param n - r Whether to retur the value for the property as a string.
             * @param r
             * 
             * @return { * } The value associated with the property
             */
            css: function(e, t, n, r) {
                var i, o, a, s = X(t);
                return Xe.test(t) || (t = ze(s)), (a = S.cssHooks[t] || S.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), void 0 === i && (i = We(e, t, r)), "normal" === i && t in Ge && (i = Ge[t]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i
            }
            /**
             * Adds a property to the document.
             * 
             * @param e - The element to add the property to.
             * @param u - The name of the property.
             * 
             * @return { Object } The property
             */
        }), S.each(["height", "width"], function(e, u) {
            S.cssHooks[u] = {
                /**
                 * Returns true if the element should be displayed.
                 * 
                 * @param e - The element to check.
                 * @param t - Whether to display the element in the browser.
                 * @param n - The options to use when determining the visibility.
                 * 
                 * @return { Boolean } Whether the element should be displayed
                 */
                get: function(e, t, n) {
                    /**
                     * @return { boolean } true if there is a change
                     */
                    if (t) return !Ue.test(S.css(e, "display")) || e.getClientRects()
                        .length && e.getBoundingClientRect()
                        .width ? Je(e, u, n) : Me(e, Ve, function() {
                            return Je(e, u, n)
                        })
                },
                /**
                 * @param e - t Th value to set the style to.
                 * @param t - n Wheher to adjust the box size.
                 * @param n
                 * 
                 * @return True if the value was set
                 */
                set: function(e, t, n) {
                    var r, i = Re(e),
                        o = !y.scrollboxSize() && "absolute" === i.position,
                        a = (o || n) && "border-box" === S.css(e, "boxSizing", !1, i),
                        s = n ? Qe(e, u, n, a, i) : 0;
                    return a && o && (s -= Math.ceil(e["offset" + u[0].toUpperCase() + u.slice(1)] - parseFloat(i[u]) - Qe(e, u, "border", !1, i) - .5)), s && (r = te.exec(t)) && "px" !== (r[3] || "px") && (e.style[u] = t, t = S.css(e, u)), Ye(0, t, s)
                }
            }
            /**
             * Returns the left margin of an element.
             * 
             * @param e - The element to get the margin for.
             * @param t - Whether to return the margin.
             * 
             * @return { Number } The margin left
             */
        }), S.cssHooks.marginLeft = Fe(y.reliableMarginLeft, function(e, t) {
            if (t) return (parseFloat(We(e, "marginLeft")) || e.getBoundingClientRect()
                .left - Me(e, {
                    marginLeft: 0
                    /**
                     * @return { Number } Left position
                     */
                }, function() {
                    return e.getBoundingClientRect()
                        .left
                })) + "px"
        }), S.each({
            margin: "",
            padding: "",
            border: "Width"
            /**
             * Defines a set function for CSS properties
             * 
             * @param i - The index of the property to define
             * @param o - The name of the property to define
             * 
             * @return { Object } The set
             */
        }, function(i, o) {
            S.cssHooks[i + o] = {
                /**
                 * @param e
                 * 
                 * @return { Object } Object with property
                 */
                expand: function(e) {
                    for (var t = 0, n = {}, r = "string" == typeof e ? e.split(" ") : [e]; t < 4; t++) n[i + ne[t] + o] = r[t] || r[t - 2] || r[0];
                    return n
                }
            }, "margin" !== i && (S.cssHooks[i + o].set = Ye)
        }), S.fn.extend({
            /**
             * Set or get the value of this element's CSS properties.
             * 
             * @param e - The element to set or get the property from.
             * @param t - The property ( s ) to set or get.
             * 
             * @return The value of this element
             */
            css: function(e, t) {
                /**
                 * @param e - t Styl name or array of style names
                 * @param t - n If provided will override exising value
                 * @param n
                 * 
                 * @return { String|Object } Value of ` t `
                 */
                return $(this, function(e, t, n) {
                    var r, i, o = {},
                        a = 0;
                    if (Array.isArray(t)) {
                        for (r = Re(e), i = t.length; a < i; a++) o[t[a]] = S.css(e, t[a], !1, r);
                        return o
                    }
                    return void 0 !== n ? S.style(e, t, n) : S.css(e, t)
                }, e, t, 1 < arguments.length)
            }
        }), ((S.Tween = Ke)
            .prototype = {
                constructor: Ke,
                /**
                 * @param e - t Th options to pass to S. easing. set
                 * @param t - n The propery to start with.
                 * @param n - r The duratio to animate to.
                 * @param r
                 * @param i - o The unt to apply
                 * @param o
                 */
                init: function(e, t, n, r, i, o) {
                    this.elem = e, this.prop = n, this.easing = i || S.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (S.cssNumber[n] ? "" : "px")
                },
                /**
                 * @return { * } The value of the
                 */
                cur: function() {
                    var e = Ke.propHooks[this.prop];
                    return e && e.get ? e.get(this) : Ke.propHooks._default.get(this)
                },
                /**
                 * @param e
                 * 
                 * @return { Object } An object representing the animation
                 */
                run: function(e) {
                    var t, n = Ke.propHooks[this.prop];
                    return this.options.duration ? this.pos = t = S.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : Ke.propHooks._default.set(this), this
                }
            })
        .init.prototype = Ke.prototype, (Ke.propHooks = {
            _default: {
                /**
                 * @param e
                 * 
                 * @return { string } The value of the property
                 */
                get: function(e) {
                    var t;
                    return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = S.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0
                },
                /**
                 * @param e
                 */
                set: function(e) {
                    S.fx.step[e.prop] ? S.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !S.cssHooks[e.prop] && null == e.elem.style[ze(e.prop)] ? e.elem[e.prop] = e.now : S.style(e.elem, e.prop, e.now + e.unit)
                }
            }
        })
        .scrollTop = Ke.propHooks.scrollLeft = {
            /**
             * @param e
             */
            set: function(e) {
                e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)
            }
        }, S.easing = {
            /**
             * @param e
             * 
             * @return { * } The value
             */
            linear: function(e) {
                return e
            },
            /**
             * @param e
             * 
             * @return { number } Sound
             */
            swing: function(e) {
                return .5 - Math.cos(e * Math.PI) / 2
            },
            _default: "swing"
        }, S.fx = Ke.prototype.init, S.fx.step = {};
    var Ze, et, tt, nt, rt = /^(?:toggle|show|hide)$/,
        it = /queueHooks$/;

    /**
     * ( private ) ot RequestAnimationFrame
     */
    function ot() {
        et && (!1 === E.hidden && C.requestAnimationFrame ? C.requestAnimationFrame(ot) : C.setTimeout(ot, S.fx.interval), S.fx.tick())
    }

    /**
     * Returns a Promise that will resolve when the browser is done.
     * 
     * 
     * @return { Promise } Promise that will resolve when
     */
    function at() {
        /**
         * / / object
         */
        return C.setTimeout(function() {
            Ze = void 0
        }), Ze = Date.now()
    }

    /**
     * Creates a margin or padding object
     * 
     * @param e - The height of the margin or padding
     * @param t - Whether to set opacity or width
     * 
     * @return { Object } The margin or padding
     */
    function st(e, t) {
        var n, r = 0,
            i = {
                height: e
            };
        for (t = t ? 1 : 0; r < 4; r += 2 - t) i["margin" + (n = ne[r])] = i["padding" + n] = e;
        return t && (i.opacity = i.width = e), i
    }

    /**
     * Executes all Tweeners registered for a given type.
     * 
     * @param e - The event to pass to the tweeners.
     * @param t - The type to look up.
     * @param n - The value to pass to each tweener.
     * 
     * @return The return value of the last tweener
     */
    function ut(e, t, n) {
        for (var r, i = (lt.tweeners[t] || [])
                .concat(lt.tweeners["*"]), o = 0, a = i.length; o < a; o++)
            if (r = i[o].call(n, t, e)) return r
    }

    /**
     * Tweens an element and returns a promise that will resolve when the tweened element is resolved or reject if the element is not easing - able.
     * 
     * @param o - The element to be tweensed
     * @param e - The properties of the element
     * @param t - The time at which to start the tween
     * 
     * @return A promise that will resolve when the tweens
     */
    function lt(o, e, t) {
        var n, a, r = 0,
            i = lt.prefilters.length,
            /**
             * / / object
             */
            s = S.Deferred()
            .always(function() {
                delete u.elem
            }),
            /**
             * @return number t : number }
             */
            u = function() {
                if (a) return !1;
                for (var e = Ze || at(), t = Math.max(0, l.startTime + l.duration - e), n = 1 - (t / l.duration || 0), r = 0, i = l.tweens.length; r < i; r++) l.tweens[r].run(n);
                return s.notifyWith(o, [l, n, t]), n < 1 && i ? t : (i || s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l]), !1)
            },
            l = s.promise({
                elem: o,
                props: S.extend({}, e),
                opts: S.extend(!0, {
                    specialEasing: {},
                    easing: S.easing._default
                }, t),
                originalProperties: e,
                originalOptions: t,
                startTime: Ze || at(),
                duration: t.duration,
                tweens: [],
                /**
                 * e The name of the easing to use.
                 * 
                 * @param e - t Th duration of the tween.
                 * @param t
                 * 
                 * @return { Tween } The created tween
                 */
                createTween: function(e, t) {
                    var n = S.Tween(o, l.opts, e, t, l.opts.specialEasing[e] || l.opts.easing);
                    return l.tweens.push(n), n
                },
                /**
                 * @param e
                 * 
                 * @return { Pusher } The pull instance for chaining
                 */
                stop: function(e) {
                    var t = 0,
                        n = e ? l.tweens.length : 0;
                    if (a) return this;
                    for (a = !0; t < n; t++) l.tweens[t].run(1);
                    return e ? (s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l, e])) : s.rejectWith(o, [l, e]), this
                }
            }),
            c = l.props;
        /**
         * @param e - t Th result of applying the changes
         * @param t
         */
        for (! function(e, t) {
                var n, r, i, o, a;
                for (n in e)
                    if (i = t[r = X(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = S.cssHooks[r]) && "expand" in a)
                        for (n in o = a.expand(o), delete e[r], o) n in e || (e[n] = o[n], t[n] = i);
                    else t[r] = i
            }(c, l.opts.specialEasing); r < i; r++)
            if (n = lt.prefilters[r].call(l, o, c, l.opts)) return m(n.stop) && (S._queueHooks(l.elem, l.opts.queue)
                .stop = n.stop.bind(n)), n;
        return S.map(c, ut, l), m(l.opts.start) && l.opts.start.call(o, l), l.progress(l.opts.progress)
            .done(l.opts.done, l.opts.complete)
            .fail(l.opts.fail)
            .always(l.opts.always), S.fx.timer(S.extend(u, {
                elem: o,
                anim: l,
                queue: l.opts.queue
            })), l
    }
    S.Animation = S.extend(lt, {
            tweeners: {
                /**
                 * @param e - t An objct containing properties to set on the tween.
                 * @param t
                 * 
                 * @return { Object } The tween
                 */
                "*": [function(e, t) {
                    var n = this.createTween(e, t);
                    return se(n.elem, e, te.exec(t), n), n
                }]
            },
            /**
             * @param e - t Th turtle to run
             * @param t
             */
            tweener: function(e, t) {
                m(e) ? (t = e, e = ["*"]) : e = e.match(P);
                for (var n, r = 0, i = e.length; r < i; r++) n = e[r], lt.tweeners[n] = lt.tweeners[n] || [], lt.tweeners[n].unshift(t)
            },
            /**
             * Updates the given element to reflect the given dimensions.
             * 
             * @param e - The element to update.
             * @param t - The dimensions to update or null to use the current dimensions.
             * @param n - An object with queue
             */
            prefilters: [function(e, t, n) {
                var r, i, o, a, s, u, l, c, f = "width" in t || "height" in t,
                    p = this,
                    d = {},
                    h = e.style,
                    g = e.nodeType && ae(e),
                    v = Y.get(e, "fxshow");
                /**
                 * / / object
                 */
                for (r in n.queue || (null == (a = S._queueHooks(e, "fx"))
                        .unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function() {
                            a.unqueued || s()
                            /**
                             * Remove from unqueued queue
                             */
                        }), a.unqueued++, p.always(function() {
                            /**
                             * / / object
                             */
                            p.always(function() {
                                a.unqueued--, S.queue(e, "fx")
                                    .length || a.empty.fire()
                            })
                        })), t)
                    if (i = t[r], rt.test(i)) {
                        if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
                            if ("show" !== i || !v || void 0 === v[r]) continue;
                            g = !0
                        }
                        d[r] = v && v[r] || S.style(e, r)
                    } if ((u = !S.isEmptyObject(t)) || !S.isEmptyObject(d))
                    /**
                     * / / object
                     */
                    for (r in f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = v && v.display) && (l = Y.get(e, "display")), "none" === (c = S.css(e, "display")) && (l ? c = l : (le([e], !0), l = e.style.display || l, c = S.css(e, "display"), le([e]))), ("inline" === c || "inline-block" === c && null != l) && "none" === S.css(e, "float") && (u || (p.done(function() {
                            h.display = l
                            /**
                             * / / object
                             */
                        }), null == l && (c = h.display, l = "none" === c ? "" : c)), h.display = "inline-block")), n.overflow && (h.overflow = "hidden", p.always(function() {
                            h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2]
                        })), u = !1, d) u || (v ? "hidden" in v && (g = v.hidden) : v = Y.access(e, "fxshow", {
                        display: l
                        /**
                         * / / object
                         */
                    }), o && (v.hidden = !g), g && le([e], !0), p.done(function() {
                        for (r in g || le([e]), Y.remove(e, "fxshow"), d) S.style(e, r, d[r])
                    })), u = ut(g ? v[r] : 0, r, p), r in v || (v[r] = u.start, g && (u.end = u.start, u.start = 0))
            }],
            /**
             * @param e - t Whther to prepend the prefilter
             * @param t
             */
            prefilter: function(e, t) {
                t ? lt.prefilters.unshift(e) : lt.prefilters.push(e)
            }
            /**
             * Create a FX transition from a duration or easing function
             * 
             * @param e - An optional duration or easing function
             * @param t - An optional easing function or true to use default
             * @param n - An optional true to use default
             * 
             * @return { Object } A FX
             */
        }), S.speed = function(e, t, n) {
            var r = e && "object" == typeof e ? S.extend({}, e) : {
                complete: n || !n && t || m(e) && e,
                duration: e,
                easing: n && t || t && !m(t) && t
            };
            /**
             * / / object
             */
            return S.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in S.fx.speeds ? r.duration = S.fx.speeds[r.duration] : r.duration = S.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function() {
                m(r.old) && r.old.call(this), r.queue && S.dequeue(this, r.queue)
            }, r
        }, S.fn.extend({
            /**
             * @param e - t Tolrance of the fade animation.
             * @param t - n Animaion duration in milliseconds.
             * @param n - r Aimation duration in milliseconds.
             * @param r
             * 
             * @return A jQuery selector for the current element
             */
            fadeTo: function(e, t, n, r) {
                return this.filter(ae)
                    .css("opacity", 0)
                    .show()
                    .end()
                    .animate({
                        opacity: t
                    }, e, n, r)
            },
            /**
             * Adds a callback to the queue.
             * 
             * @param t - Options to pass to the callback.
             * @param e - Optional speed object that will be used to set the callback's speed.
             * @param n - Optional duration in milliseconds to set on the callback.
             * @param r - Optional duration in milliseconds to set on the callback.
             * 
             * @return Returns the callback to be invoked on success
             */
            animate: function(t, e, n, r) {
                var i = S.isEmptyObject(t),
                    o = S.speed(e, n, r),
                    /**
                     * / / object
                     */
                    a = function() {
                        var e = lt(this, S.extend({}, t), o);
                        (i || Y.get(this, "finish")) && e.stop(!0)
                    };
                return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a)
            },
            /**
             * If provided stop or remove animations.
             * 
             * @param i - Queue to queue animations to.
             * @param e - Optional function to call when stopping an animation.
             * @param o - Optional callback to remove from queue.
             * 
             * @return True if queue was changed
             */
            stop: function(i, e, o) {
                /**
                 * @param e
                 */
                var a = function(e) {
                    var t = e.stop;
                    delete e.stop, t(o)
                };
                /**
                 * a / object
                 */
                return "string" != typeof i && (o = e, e = i, i = void 0), e && this.queue(i || "fx", []), this.each(function() {
                    var e = !0,
                        t = null != i && i + "queueHooks",
                        n = S.timers,
                        r = Y.get(this);
                    if (t) r[t] && r[t].stop && a(r[t]);
                    else
                        for (t in r) r[t] && r[t].stop && it.test(t) && a(r[t]);
                    for (t = n.length; t--;) n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(o), e = !1, n.splice(t, 1));
                    !e && o || S.dequeue(this, i)
                })
            },
            /**
             * Queues an element for execution.
             * 
             * @param a - The queue to operate on.
             * 
             * @return True if the queue was modified
             */
            finish: function(a) {
                /**
                 * a / object
                 */
                return !1 !== a && (a = a || "fx"), this.each(function() {
                    var e, t = Y.get(this),
                        n = t[a + "queue"],
                        r = t[a + "queueHooks"],
                        i = S.timers,
                        o = n ? n.length : 0;
                    for (t.finish = !0, S.queue(this, a, []), r && r.stop && r.stop.call(this, !0), e = i.length; e--;) i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), i.splice(e, 1));
                    for (e = 0; e < o; e++) n[e] && n[e].finish && n[e].finish.call(this);
                    delete t.finish
                })
            }
            /**
             * Adds a function to the class that animates a view
             * 
             * @param e - The name of the function to add. This can be a string or a jQuery object.
             * @param r - The name of the function to add.
             * 
             * @return { Function } Returns the new function
             */
        }), S.each(["toggle", "show", "hide"], function(e, r) {
            var i = S.fn[r];
            /**
             * @param e - t Th time to run the animation in ms.
             * @param t - n The number of animaion frames to run.
             * @param n
             * 
             * @return { Object } An object representing the animation
             */
            S.fn[r] = function(e, t, n) {
                return null == e || "boolean" == typeof e ? i.apply(this, arguments) : this.animate(st(r, !0), e, t, n)
            }
        }), S.each({
            slideDown: st("show"),
            slideUp: st("hide"),
            slideToggle: st("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
            /**
             * Adds a function to S. fn that animates a DOM element
             * 
             * @param e - The name of the element to animate
             * @param r - The value to set the animation property to
             * 
             * @return { Boolean } True if the animation was
             */
        }, function(e, r) {
            /**
             * @param e - t Th time to wait before animating.
             * @param t - n The number of milliseconds o wait before animating.
             * @param n
             * 
             * @return { Object } An object representing the animation
             */
            S.fn[e] = function(e, t, n) {
                return this.animate(r, e, t, n)
            }
            /**
             * a / object
             */
        }), S.timers = [], S.fx.tick = function() {
            var e, t = 0,
                n = S.timers;
            for (Ze = Date.now(); t < n.length; t++)(e = n[t])() || n[t] !== e || n.splice(t--, 1);
            n.length || S.fx.stop(), Ze = void 0
            /**
             * @param e
             */
        }, S.fx.timer = function(e) {
            S.timers.push(e), S.fx.start()
            /**
             * / / object
             */
        }, S.fx.interval = 13, S.fx.start = function() {
            et || (et = !0, ot())
            /**
             * / / object
             */
        }, S.fx.stop = function() {
            et = null
        }, S.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
            /**
             * Queue a function to run at a specific speed
             * 
             * @param r - The speed to run the function at
             * @param e - The name of the function to run
             * 
             * @return The value of the speed
             */
        }, S.fn.delay = function(r, e) {
            /**
             * Sets a timeout on a t.
             * 
             * @param e - The timeout to set.
             * @param t - The t to set
             */
            return r = S.fx && S.fx.speeds[r] || r, e = e || "fx", this.queue(e, function(e, t) {
                var n = C.setTimeout(e, r);
                /**
                 * / / object
                 */
                t.stop = function() {
                    C.clearTimeout(n)
                }
            })
        }, tt = E.createElement("input"), nt = E.createElement("select")
        .appendChild(E.createElement("option")), tt.type = "checkbox", y.checkOn = "" !== tt.value, y.optSelected = nt.selected, (tt = E.createElement("input"))
        .value = "t", tt.type = "radio", y.radioValue = "t" === tt.value;
    var ct, ft = S.expr.attrHandle;
    S.fn.extend({
        /**
         * @param e - t Optional function to st or remove.
         * @param t
         * 
         * @return A set of matched elements
         */
        attr: function(e, t) {
            return $(this, S.attr, e, t, 1 < arguments.length)
        },
        /**
         * Removes attributes from each element
         * 
         * @param e - The name of the attribute to remove
         * 
         * @return { Array } An array of this
         */
        removeAttr: function(e) {
            /**
             * / / object
             */
            return this.each(function() {
                S.removeAttr(this, e)
            })
        }
    }), S.extend({
        /**
         * @param e - t Attribut name ( case insensitive )
         * @param t - n Atribute value ( optional )
         * @param n
         * 
         * @return { String|undefined } Value of
         */
        attr: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return "undefined" == typeof e.getAttribute ? S.prop(e, t, n) : (1 === o && S.isXMLDoc(e) || (i = S.attrHooks[t.toLowerCase()] || (S.expr.match.bool.test(t) ? ct : void 0)), void 0 !== n ? null === n ? void S.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = S.find.attr(e, t)) ? void 0 : r)
        },
        attrHooks: {
            type: {
                /**
                 * @param e - t Typ of attribute to set.
                 * @param t
                 * 
                 * @return Returns true if the attribute was set
                 */
                set: function(e, t) {
                    if (!y.radioValue && "radio" === t && A(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t
                    }
                }
            }
        },
        /**
         * @param e - t Attribut ( s ) to remove
         * @param t
         */
        removeAttr: function(e, t) {
            var n, r = 0,
                i = t && t.match(P);
            if (i && 1 === e.nodeType)
                while (n = i[r++]) e.removeAttribute(n)
        }
    }), ct = {
        /**
         * @param e - t Valu to set or remove.
         * @param t - n Atribute name to set.
         * @param n
         * 
         * @return { String } The attribute name
         */
        set: function(e, t, n) {
            return !1 === t ? S.removeAttr(e, n) : e.setAttribute(n, n), n
        }
        /**
         * Adds a callback to S. find. attr that checks if the element matches the given attribute.
         * 
         * @param e - The element to check.
         * @param t - The attribute to match.
         * 
         * @return The value that was matched
         */
    }, S.each(S.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var a = ft[t] || S.find.attr;
        /**
         * @param e - t Th property to check.
         * @param t - n If rue return the property before checking.
         * @param n
         * 
         * @return { String|null } The property if it exists null otherwise
         */
        ft[t] = function(e, t, n) {
            var r, i, o = t.toLowerCase();
            return n || (i = ft[o], ft[o] = r, r = null != a(e, t, n) ? o : null, ft[o] = i), r
        }
    });
    var pt = /^(?:input|select|textarea|button)$/i,
        dt = /^(?:a|area)$/i;

    /**
     * Converts a string to space seperated tokens
     * 
     * @param e - The string to convert.
     * 
     * @return { string } The space seperated
     */
    function ht(e) {
        return (e.match(P) || [])
            .join(" ")
    }

    /**
     * Returns the class attribute of the given element
     * 
     * @param e - Element to get the class attribute from
     * 
     * @return { String } The class
     */
    function gt(e) {
        return e.getAttribute && e.getAttribute("class") || ""
    }

    /**
     * Converts a string to an array
     * 
     * @param e - The string to convert.
     * 
     * @return { Array } The converted array
     */
    function vt(e) {
        return Array.isArray(e) ? e : "string" == typeof e && e.match(P) || []
    }
    S.fn.extend({
        /**
         * @param e - t Th value to set the property to.
         * @param t
         * 
         * @return A Query with the given value
         */
        prop: function(e, t) {
            return $(this, S.prop, e, t, 1 < arguments.length)
        },
        /**
         * Removes a property from an Array
         * 
         * @param e - The name of the property to remove
         * 
         * @return { Array } The array
         */
        removeProp: function(e) {
            /**
             * / / object
             */
            return this.each(function() {
                delete this[S.propFix[e] || e]
            })
        }
    }), S.extend({
        /**
         * @param e - t Th name of the property to set or get.
         * @param t - n The value o set.
         * @param n
         * 
         * @return True if the element is an XML document
         */
        prop: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return 1 === o && S.isXMLDoc(e) || (t = S.propFix[t] || t, i = S.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t]
        },
        propHooks: {
            tabIndex: {
                /**
                 * @param e
                 * 
                 * @return { Number } Tabindex if found - 1
                 */
                get: function(e) {
                    var t = S.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : pt.test(e.nodeName) || dt.test(e.nodeName) && e.href ? 0 : -1
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    }), y.optSelected || (S.propHooks.selected = {
        /**
         * @param e
         * 
         * @return { number|null } The index of the selected element or null if there is no parent
         */
        get: function(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null
        },
        /**
         * @param e
         */
        set: function(e) {
            var t = e.parentNode;
            t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex)
        }
        /**
         * / / object
         */
    }), S.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        S.propFix[this.toLowerCase()] = this
    }), S.fn.extend({
        /**
         * Adds or removes classes from each element in the set.
         * 
         * @param t - Class name or function to call to add or remove.
         * 
         * @return { Array } The set
         */
        addClass: function(t) {
            var e, n, r, i, o, a, s, u = 0;
            /**
             * @param e
             */
            if (m(t)) return this.each(function(e) {
                S(this)
                    .addClass(t.call(this, e, gt(this)))
            });
            if ((e = vt(t))
                .length)
                while (n = this[u++])
                    if (i = gt(n), r = 1 === n.nodeType && " " + ht(i) + " ") {
                        a = 0;
                        while (o = e[a++]) r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                        i !== (s = ht(r)) && n.setAttribute("class", s)
                    } return this
        },
        /**
         * ( C ) 2003 - 06 - 13 Modifications to DOM Level 3 Restrictions Corresponds to [[ Element. addClass ]].
         * 
         * @param t - Class selector or function to remove.
         * 
         * @return New array with classes or the current array
         */
        removeClass: function(t) {
            var e, n, r, i, o, a, s, u = 0;
            /**
             * @param e
             */
            if (m(t)) return this.each(function(e) {
                S(this)
                    .removeClass(t.call(this, e, gt(this)))
            });
            if (!arguments.length) return this.attr("class", "");
            if ((e = vt(t))
                .length)
                while (n = this[u++])
                    if (i = gt(n), r = 1 === n.nodeType && " " + ht(i) + " ") {
                        a = 0;
                        while (o = e[a++])
                            while (-1 < r.indexOf(" " + o + " ")) r = r.replace(" " + o + " ", " ");
                        i !== (s = ht(r)) && n.setAttribute("class", s)
                    } return this
        },
        /**
         * Adds or removes classes from this element
         * 
         * @param i - Class or classes to add / remove
         * @param t - Number of classes to remove
         * 
         * @return { Boolean } true if the class was
         */
        toggleClass: function(i, t) {
            var o = typeof i,
                a = "string" === o || Array.isArray(i);
            /**
             * @param e
             */
            return "boolean" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : m(i) ? this.each(function(e) {
                S(this)
                    .toggleClass(i.call(this, e, gt(this), t), t)
                /**
                 * a / object
                 */
            }) : this.each(function() {
                var e, t, n, r;
                if (a) {
                    t = 0, n = S(this), r = vt(i);
                    while (e = r[t++]) n.hasClass(e) ? n.removeClass(e) : n.addClass(e)
                } else void 0 !== i && "boolean" !== o || ((e = gt(this)) && Y.set(this, "__className__", e), this.setAttribute && this.setAttribute("class", e || !1 === i ? "" : Y.get(this, "__className__") || ""))
            })
        },
        /**
         * @param e
         * 
         * @return { boolean } True if the element is found
         */
        hasClass: function(e) {
            var t, n, r = 0;
            t = " " + e + " ";
            while (n = this[r++])
                if (1 === n.nodeType && -1 < (" " + ht(gt(n)) + " ")
                    .indexOf(t)) return !0;
            return !1
        }
    });
    var yt = /\r/g;
    S.fn.extend({
        /**
         * If provided a value will be set on the node.
         * 
         * @param n - The value to set or null to use the current value.
         * 
         * @return { Array|Object } An array of values or the value of the node
         */
        val: function(n) {
            var r, e, i, t = this[0];
            /**
             * The value of the node
             * 
             * @param e - The value to set.
             * 
             * @return { Object } The value
             */
            return arguments.length ? (i = m(n), this.each(function(e) {
                var t;
                /**
                 * @param e
                 * 
                 * @return { String } Formatted value
                 */
                1 === this.nodeType && (null == (t = i ? n.call(this, e, S(this)
                    .val()) : n) ? t = "" : "number" == typeof t ? t += "" : Array.isArray(t) && (t = S.map(t, function(e) {
                    return null == e ? "" : e + ""
                })), (r = S.valHooks[this.type] || S.valHooks[this.nodeName.toLowerCase()]) && "set" in r && void 0 !== r.set(this, t, "value") || (this.value = t))
            })) : t ? (r = S.valHooks[t.type] || S.valHooks[t.nodeName.toLowerCase()]) && "get" in r && void 0 !== (e = r.get(t, "value")) ? e : "string" == typeof(e = t.value) ? e.replace(yt, "") : null == e ? "" : e : void 0
        }
    }), S.extend({
        valHooks: {
            option: {
                /**
                 * @param e
                 * 
                 * @return Text of element or null
                 */
                get: function(e) {
                    var t = S.find.attr(e, "value");
                    return null != t ? t : ht(S.text(e))
                }
            },
            select: {
                /**
                 * @param e
                 * 
                 * @return An array of values or null
                 */
                get: function(e) {
                    var t, n, r, i = e.options,
                        o = e.selectedIndex,
                        a = "select-one" === e.type,
                        s = a ? null : [],
                        u = a ? o + 1 : i.length;
                    for (r = o < 0 ? u : a ? o : 0; r < u; r++)
                        if (((n = i[r])
                                .selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, "optgroup"))) {
                            if (t = S(n)
                                .val(), a) return t;
                            s.push(t)
                        } return s
                },
                /**
                 * @param e - t An array of option nams to set.
                 * @param t
                 * 
                 * @return { Boolean [] } The selected and unselected options
                 */
                set: function(e, t) {
                    var n, r, i = e.options,
                        o = S.makeArray(t),
                        a = i.length;
                    while (a--)((r = i[a])
                        .selected = -1 < S.inArray(S.valHooks.option.get(r), o)) && (n = !0);
                    return n || (e.selectedIndex = -1), o
                }
            }
        }
        /**
         * ( C ) 2003 John Resig This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 3 of the License or ( at your option ) any later version. This program is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the
         * 
         * 
         * @return { Object } The object with the setter and getter
         */
    }), S.each(["radio", "checkbox"], function() {
        S.valHooks[this] = {
            /**
             * @param e - t Th value ( s ) to check or array of values to check.
             * @param t
             * 
             * @return Whether the checkbox was checked
             */
            set: function(e, t) {
                if (Array.isArray(t)) return e.checked = -1 < S.inArray(S(e)
                    .val(), t)
            }
            /**
             * @param e
             * 
             * @return " on " if the element doesn't have a value or the value
             */
        }, y.checkOn || (S.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value
        })
    }), y.focusin = "onfocusin" in C;
    var mt = /^(?:focusinfocus|focusoutblur)$/,
        /**
         * @param e
         */
        xt = function(e) {
            e.stopPropagation()
        };
    S.extend(S.event, {
        /**
         * @param e - t Th target of the event.
         * @param t - n The arget of the event.
         * @param n - r Whether or ot to trigger the event.
         * @param r
         * 
         * @return { Boolean } True if the event was fired
         */
        trigger: function(e, t, n, r) {
            var i, o, a, s, u, l, c, f, p = [n || E],
                d = v.call(e, "type") ? e.type : e,
                h = v.call(e, "namespace") ? e.namespace.split(".") : [];
            if (o = f = a = n = n || E, 3 !== n.nodeType && 8 !== n.nodeType && !mt.test(d + S.event.triggered) && (-1 < d.indexOf(".") && (d = (h = d.split("."))
                        .shift(), h.sort()), u = d.indexOf(":") < 0 && "on" + d, (e = e[S.expando] ? e : new S.Event(d, "object" == typeof e && e))
                    .isTrigger = r ? 2 : 3, e.namespace = h.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, e.result = void 0, e.target || (e.target = n), t = null == t ? [e] : S.makeArray(t, [e]), c = S.event.special[d] || {}, r || !c.trigger || !1 !== c.trigger.apply(n, t))) {
                if (!r && !c.noBubble && !x(n)) {
                    for (s = c.delegateType || d, mt.test(s + d) || (o = o.parentNode); o; o = o.parentNode) p.push(o), a = o;
                    a === (n.ownerDocument || E) && p.push(a.defaultView || a.parentWindow || C)
                }
                i = 0;
                while ((o = p[i++]) && !e.isPropagationStopped()) f = o, e.type = 1 < i ? s : c.bindType || d, (l = (Y.get(o, "events") || Object.create(null))[e.type] && Y.get(o, "handle")) && l.apply(o, t), (l = u && o[u]) && l.apply && V(o) && (e.result = l.apply(o, t), !1 === e.result && e.preventDefault());
                return e.type = d, r || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(p.pop(), t) || !V(n) || u && m(n[d]) && !x(n) && ((a = n[u]) && (n[u] = null), S.event.triggered = d, e.isPropagationStopped() && f.addEventListener(d, xt), n[d](), e.isPropagationStopped() && f.removeEventListener(d, xt), S.event.triggered = void 0, a && (n[u] = a)), e.result
            }
        },
        /**
         * @param e - t Th data to pass to the event's handler.
         * @param t - n An objec containing additional properties
         * @param n
         */
        simulate: function(e, t, n) {
            var r = S.extend(new S.Event, n, {
                type: e,
                isSimulated: !0
            });
            S.event.trigger(r, null, t)
        }
    }), S.fn.extend({
        /**
         * Trigger an event on each element
         * 
         * @param e - Event name to trigger.
         * @param t - Trigger function to be invoked.
         * 
         * @return { Array } An array of elements
         */
        trigger: function(e, t) {
            /**
             * / / object
             */
            return this.each(function() {
                S.event.trigger(e, t, this)
            })
        },
        /**
         * @param e - t Optional triggr target. If provided it will be passed to event handlers as first argument.
         * @param t
         * 
         * @return The value of the event
         */
        triggerHandler: function(e, t) {
            var n = this[0];
            if (n) return S.event.trigger(e, t, n, !0)
        }
    }), y.focusin || S.each({
        focus: "focusin",
        blur: "focusout"
        /**
         * ( C ) 2014 John Resig This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 3 of the License or ( at your option ) any later version. This program is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the G
         * 
         * @param n - The event target to listen to.
         * @param r - The event target to listen to
         */
    }, function(n, r) {
        /**
         * @param e
         */
        var i = function(e) {
            S.event.simulate(r, e.target, S.event.fix(e))
        };
        S.event.special[r] = {
            /**
             * / / object
             */
            setup: function() {
                var e = this.ownerDocument || this.document || this,
                    t = Y.access(e, r);
                t || e.addEventListener(n, i, !0), Y.access(e, r, (t || 0) + 1)
            },
            /**
             * a / object
             */
            teardown: function() {
                var e = this.ownerDocument || this.document || this,
                    t = Y.access(e, r) - 1;
                t ? Y.access(e, r, t) : (e.removeEventListener(n, i, !0), Y.remove(e, r))
            }
        }
    });
    var bt = C.location,
        wt = {
            guid: Date.now()
        },
        Tt = /\?/;
    /**
     * Parse XML and return parsed result
     * 
     * @param e - XML to parse as string
     * 
     * @return { Object } Parsed result or
     */
    S.parseXML = function(e) {
        var t, n;
        if (!e || "string" != typeof e) return null;
        try {
            t = (new C.DOMParser)
                .parseFromString(e, "text/xml")
        } catch (e) {}
        /**
         * @param e
         * 
         * @return Text content of the element
         */
        return n = t && t.getElementsByTagName("parsererror")[0], t && !n || S.error("Invalid XML: " + (n ? S.map(n.childNodes, function(e) {
                return e.textContent
            })
            .join("\n") : e)), t
    };
    var Ct = /\[\]$/,
        Et = /\r?\n/g,
        St = /^(?:submit|button|image|reset|file)$/i,
        kt = /^(?:input|select|textarea|keygen)/i;

    /**
     * Adds properties and / or properties from an object or array to a JSON.
     * 
     * @param n - The name to use for the JSON.
     * @param e - The object or array to add.
     * @param r - Whether to add the property to the JSON.
     * @param i - If true an error will be logged
     */
    function At(n, e, r, i) {
        var t;
        /**
         * @param e - t Th value to pass to the error if any
         * @param t
         */
        if (Array.isArray(e)) S.each(e, function(e, t) {
            r || Ct.test(n) ? i(n, t) : At(n + "[" + ("object" == typeof t && null != t ? e : "") + "]", t, r, i)
        });
        else if (r || "object" !== w(e)) i(n, e);
        else
            for (t in e) At(n + "[" + t + "]", e[t], r, i)
    }
    /**
     * Converts an object to query string.
     * 
     * @param e - The object to convert.
     * @param t - Optional function to call before serializing.
     * 
     * @return The query string representation of the object
     */
    S.param = function(e, t) {
        var n, r = [],
            /**
             * @param e - t Th value to store
             * @param t
             */
            i = function(e, t) {
                var n = m(t) ? t() : t;
                r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n)
            };
        if (null == e) return "";
        /**
         * / / object
         */
        if (Array.isArray(e) || e.jquery && !S.isPlainObject(e)) S.each(e, function() {
            i(this.name, this.value)
        });
        else
            for (n in e) At(n, e[n], t, i);
        return r.join("&")
    }, S.fn.extend({
        /**
         * @return { String } Serialized array
         */
        serialize: function() {
            return S.param(this.serializeArray())
        },
        /**
         * Returns an array of elements that have been checked.
         * 
         * 
         * @return { Array } An array of elements
         */
        serializeArray: function() {
            /**
             * @return { Array } An array of this view
             */
            return this.map(function() {
                    var e = S.prop(this, "elements");
                    return e ? S.makeArray(e) : this
                    /**
                     * @return { boolean } Whether or
                     */
                })
                .filter(function() {
                    var e = this.type;
                    return this.name && !S(this)
                        .is(":disabled") && kt.test(this.nodeName) && !St.test(e) && (this.checked || !pe.test(e))
                    /**
                     * Returns the value of the select.
                     * 
                     * @param e - The value to replace.
                     * @param t - The name to replace.
                     * 
                     * @return { Array } The value of the select
                     */
                })
                .map(function(e, t) {
                    var n = S(this)
                        .val();
                    /**
                     * @param e
                     * 
                     * @return { Object } The wrap
                     */
                    return null == n ? null : Array.isArray(n) ? S.map(n, function(e) {
                        return {
                            name: t.name,
                            value: e.replace(Et, "\r\n")
                        }
                    }) : {
                        name: t.name,
                        value: n.replace(Et, "\r\n")
                    }
                })
                .get()
        }
    });
    var Nt = /%20/g,
        jt = /#.*$/,
        Dt = /([?&])_=[^&]*/,
        qt = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Lt = /^(?:GET|HEAD)$/,
        Ht = /^\/\//,
        Ot = {},
        Pt = {},
        Rt = "*/".concat("*"),
        Mt = E.createElement("a");

    /**
     * Returns a function that when passed a value to the returned function will append the value to the array passed as the second argument.
     * 
     * @param o - The object to store the value in.
     * 
     * @return { Function } The function to use
     */
    function It(o) {
        /**
         * @param e - t Valu to add to
         * @param t
         */
        return function(e, t) {
            "string" != typeof e && (t = e, e = "*");
            var n, r = 0,
                i = e.toLowerCase()
                .match(P) || [];
            if (m(t))
                while (n = i[r++]) "+" === n[0] ? (n = n.slice(1) || "*", (o[n] = o[n] || [])
                        .unshift(t)) : (o[n] = o[n] || [])
                    .push(t)
        }
    }

    /**
     * Applies mutation to the document before saving it to the database.
     * 
     * @param t - mutation to apply to the document
     * @param i - document to be saved.
     * @param o - object passed to mutation function to set context
     * @param a - options passed to mutation function
     * 
     * @return whether mutations should be
     */
    function Wt(t, i, o, a) {
        var s = {},
            u = t === Pt;

        /**
         * Validates and sets data types.
         * 
         * @param e - The name of the data type to validate.
         * 
         * @return { boolean } True if the data type is valid
         */
        function l(e) {
            var r;
            /**
             * @param e - t Th callback to use when verifying.
             * @param t
             * 
             * @return { boolean } Whether or not validation succeeded
             */
            return s[e] = !0, S.each(t[e] || [], function(e, t) {
                var n = t(i, o, a);
                return "string" != typeof n || u || s[n] ? u ? !(r = n) : void 0 : (i.dataTypes.unshift(n), l(n), !1)
            }), r
        }
        return l(i.dataTypes[0]) || !s["*"] && l("*")
    }

    /**
     * Merge options from an object with the ones that are set in the ajaxSettings
     * 
     * @param e - The object to merge into
     * @param t - The options to merge with the defaults
     * 
     * @return { Object } The merged
     */
    function Ft(e, t) {
        var n, r, i = S.ajaxSettings.flatOptions || {};
        for (n in t) void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
        return r && S.extend(!0, e, r), e
    }
    Mt.href = bt.href, S.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: bt.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Rt,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": S.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        /**
         * @param e - t Th options to be used in the request.
         * @param t
         * 
         * @return The request as a string
         */
        ajaxSetup: function(e, t) {
            return t ? Ft(Ft(e, S.ajaxSettings), t) : Ft(S.ajaxSettings, e)
        },
        ajaxPrefilter: It(Ot),
        ajaxTransport: It(Pt),
        /**
         * Creates an ajax request.
         * 
         * @param e - The name of the request to execute.
         * @param t - The options to pass to the request.
         * 
         * @return A promise that will be resolved when the request has completed
         */
        ajax: function(e, t) {
            "object" == typeof e && (t = e, e = void 0), t = t || {};
            var c, f, p, n, d, r, h, g, i, o, v = S.ajaxSetup({}, t),
                y = v.context || v,
                m = v.context && (y.nodeType || y.jquery) ? S(y) : S.event,
                x = S.Deferred(),
                b = S.Callbacks("once memory"),
                w = v.statusCode || {},
                a = {},
                s = {},
                u = "canceled",
                T = {
                    readyState: 0,
                    /**
                     * @param e
                     * 
                     * @return { String } Value of the key
                     */
                    getResponseHeader: function(e) {
                        var t;
                        if (h) {
                            if (!n) {
                                n = {};
                                while (t = qt.exec(p)) n[t[1].toLowerCase() + " "] = (n[t[1].toLowerCase() + " "] || [])
                                    .concat(t[2])
                            }
                            t = n[e.toLowerCase() + " "]
                        }
                        return null == t ? null : t.join(", ")
                    },
                    /**
                     * @return { string|null } value to
                     */
                    getAllResponseHeaders: function() {
                        return h ? p : null
                    },
                    /**
                     * @param e - t Th value to set the property to.
                     * @param t
                     * 
                     * @return ` this ` for chaining
                     */
                    setRequestHeader: function(e, t) {
                        return null == h && (e = s[e.toLowerCase()] = s[e.toLowerCase()] || e, a[e] = t), this
                    },
                    /**
                     * @param e
                     * 
                     * @return { Object } The instance of Query
                     */
                    overrideMimeType: function(e) {
                        return null == h && (v.mimeType = e), this
                    },
                    /**
                     * @param e
                     * 
                     * @return { Object } The current
                     */
                    statusCode: function(e) {
                        var t;
                        if (e)
                            if (h) T.always(e[T.status]);
                            else
                                for (t in e) w[t] = [w[t], e[t]];
                        return this
                    },
                    /**
                     * @param e
                     * 
                     * @return { Object } An object representing the state of the application
                     */
                    abort: function(e) {
                        var t = e || u;
                        return c && c.abort(t), l(0, t), this
                    }
                };
            if (x.promise(T), v.url = ((e || v.url || bt.href) + "")
                .replace(Ht, bt.protocol + "//"), v.type = t.method || t.type || v.method || v.type, v.dataTypes = (v.dataType || "*")
                .toLowerCase()
                .match(P) || [""], null == v.crossDomain) {
                r = E.createElement("a");
                try {
                    r.href = v.url, r.href = r.href, v.crossDomain = Mt.protocol + "//" + Mt.host != r.protocol + "//" + r.host
                } catch (e) {
                    v.crossDomain = !0
                }
            }
            if (v.data && v.processData && "string" != typeof v.data && (v.data = S.param(v.data, v.traditional)), Wt(Ot, v, t, T), h) return T;
            for (i in (g = S.event && v.global) && 0 == S.active++ && S.event.trigger("ajaxStart"), v.type = v.type.toUpperCase(), v.hasContent = !Lt.test(v.type), f = v.url.replace(jt, ""), v.hasContent ? v.data && v.processData && 0 === (v.contentType || "")
                .indexOf("application/x-www-form-urlencoded") && (v.data = v.data.replace(Nt, "+")) : (o = v.url.slice(f.length), v.data && (v.processData || "string" == typeof v.data) && (f += (Tt.test(f) ? "&" : "?") + v.data, delete v.data), !1 === v.cache && (f = f.replace(Dt, "$1"), o = (Tt.test(f) ? "&" : "?") + "_=" + wt.guid++ + o), v.url = f + o), v.ifModified && (S.lastModified[f] && T.setRequestHeader("If-Modified-Since", S.lastModified[f]), S.etag[f] && T.setRequestHeader("If-None-Match", S.etag[f])), (v.data && v.hasContent && !1 !== v.contentType || t.contentType) && T.setRequestHeader("Content-Type", v.contentType), T.setRequestHeader("Accept", v.dataTypes[0] && v.accepts[v.dataTypes[0]] ? v.accepts[v.dataTypes[0]] + ("*" !== v.dataTypes[0] ? ", " + Rt + "; q=0.01" : "") : v.accepts["*"]), v.headers) T.setRequestHeader(i, v.headers[i]);
            if (v.beforeSend && (!1 === v.beforeSend.call(y, T, v) || h)) return T.abort();
            if (u = "abort", b.add(v.complete), T.done(v.success), T.fail(v.error), c = Wt(Pt, v, t, T)) {
                if (T.readyState = 1, g && m.trigger("ajaxSend", [T, v]), h) return T;
                /**
                 * / / object
                 */
                v.async && 0 < v.timeout && (d = C.setTimeout(function() {
                    T.abort("timeout")
                }, v.timeout));
                try {
                    h = !1, c.send(a, l)
                } catch (e) {
                    if (h) throw e;
                    l(-1, e)
                }
            } else l(-1, "No Transport");

            /**
             * Initializes the converter and waits for it to finish.
             * 
             * @param e - The event to be converted.
             * @param t - The response object to use as the source of conversion.
             * @param n - The data to convert the event's contents to.
             * @param r - The content type to match. If null the Content - Type header will be used.
             * 
             * @return The converter that was created
             */
            function l(e, t, n, r) {
                var i, o, a, s, u, l = t;
                /**
                 * @param e - t Th request that triggered this event.
                 * @param t - n The daa to convert.
                 * @param n
                 * 
                 * @return { string } The MIME type and data converter
                 */
                h || (h = !0, d && C.clearTimeout(d), c = void 0, p = r || "", T.readyState = 0 < e ? 4 : 0, i = 200 <= e && e < 300 || 304 === e, n && (s = function(e, t, n) {
                    var r, i, o, a, s = e.contents,
                        u = e.dataTypes;
                    while ("*" === u[0]) u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
                    if (r)
                        for (i in s)
                            if (s[i] && s[i].test(r)) {
                                u.unshift(i);
                                break
                            } if (u[0] in n) o = u[0];
                    else {
                        for (i in n) {
                            if (!u[0] || e.converters[i + " " + u[0]]) {
                                o = i;
                                break
                            }
                            a || (a = i)
                        }
                        o = o || a
                    }
                    if (o) return o !== u[0] && u.unshift(o), n[o]
                    /**
                     * / / object
                     */
                    /**
                     * @param e - t Th response field to set.
                     * @param t - n The response objec to set.
                     * @param n - r Whether or ot to filter by data type.
                     * @param r
                     * 
                     * @return { Object } The response object
                     */
                }(v, T, n)), !i && -1 < S.inArray("script", v.dataTypes) && S.inArray("json", v.dataTypes) < 0 && (v.converters["text script"] = function() {}), s = function(e, t, n, r) {
                    var i, o, a, s, u, l = {},
                        c = e.dataTypes.slice();
                    if (c[1])
                        for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
                    o = c.shift();
                    while (o)
                        if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift())
                            if ("*" === o) o = u;
                            else if ("*" !== u && u !== o) {
                        if (!(a = l[u + " " + o] || l["* " + o]))
                            for (i in l)
                                if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                                    !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
                                    break
                                } if (!0 !== a)
                            if (a && e["throws"]) t = a(t);
                            else try {
                                t = a(t)
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: a ? e : "No conversion from " + u + " to " + o
                                }
                            }
                    }
                    return {
                        state: "success",
                        data: t
                    }
                }(v, s, T, i), i ? (v.ifModified && ((u = T.getResponseHeader("Last-Modified")) && (S.lastModified[f] = u), (u = T.getResponseHeader("etag")) && (S.etag[f] = u)), 204 === e || "HEAD" === v.type ? l = "nocontent" : 304 === e ? l = "notmodified" : (l = s.state, o = s.data, i = !(a = s.error))) : (a = l, !e && l || (l = "error", e < 0 && (e = 0))), T.status = e, T.statusText = (t || l) + "", i ? x.resolveWith(y, [o, l, T]) : x.rejectWith(y, [T, l, a]), T.statusCode(w), w = void 0, g && m.trigger(i ? "ajaxSuccess" : "ajaxError", [T, v, i ? o : a]), b.fireWith(y, [T, l]), g && (m.trigger("ajaxComplete", [T, v]), --S.active || S.event.trigger("ajaxStop")))
            }
            return T
        },
        /**
         * @param e - t Th key for the entity to query.
         * @param t - n The field name o query.
         * @param n
         * 
         * @return { Promise } A promise that fulfills with the result of the query
         */
        getJSON: function(e, t, n) {
            return S.get(e, t, n, "json")
        },
        /**
         * @param e - t Th name of the property to get.
         * @param t
         * 
         * @return The value of the property
         */
        getScript: function(e, t) {
            return S.get(e, void 0, t, "script")
        }
        /**
         * Sets the ` XMLHttpRequest ` method on the XMLHttpRequest instance.
         * 
         * @param e - The URL to send the request to.
         * @param i - The name of the method to set.
         * 
         * @return { Object } The XMLHttpRequest
         */
    }), S.each(["get", "post"], function(e, i) {
        /**
         * @param e - t Th data to send to the server.
         * @param t - n The daa to send to the server if the request was successful.
         * @param n - r The data type to sed to the server ( defaults to JSON ).
         * @param r
         * 
         * @return The response from the server
         */
        S[i] = function(e, t, n, r) {
            return m(t) && (r = r || n, n = t, t = void 0), S.ajax(S.extend({
                url: e,
                type: i,
                dataType: r,
                data: t,
                success: n
            }, S.isPlainObject(e) && e))
        }
        /**
         * @param e
         */
    }), S.ajaxPrefilter(function(e) {
        var t;
        for (t in e.headers) "content-type" === t.toLowerCase() && (e.contentType = e.headers[t] || "")
        /**
         * Executes a script and returns the result
         * 
         * @param e - The url of the script to execute
         * @param t - The parameters to pass to the script
         * @param n - The parameters to pass to the script
         * 
         * @return { Object } The result of the
         */
    }), S._evalUrl = function(e, t, n) {
        return S.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            converters: {
                /**
                 * / / object
                 */
                "text script": function() {}
            },
            /**
             * @param e
             */
            dataFilter: function(e) {
                S.globalEval(e, t, n)
            }
        })
    }, S.fn.extend({
        /**
         * Executes the query and appends the result to the DOM.
         * 
         * @param e - The query to execute.
         * 
         * @return { Array } The query after execution
         */
        wrapAll: function(e) {
            var t;
            /**
             * @return The element that was found
             */
            return this[0] && (m(e) && (e = e.call(this[0])), t = S(e, this[0].ownerDocument)
                .eq(0)
                .clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function() {
                    var e = this;
                    while (e.firstElementChild) e = e.firstElementChild;
                    return e
                })
                .append(this)), this
        },
        /**
         * Appends or modifies the content of each HTMLElement in the set.
         * 
         * @param n - An object containing methods to be called on each HTMLElement.
         * 
         * @return This Array with the results of the operation
         */
        wrapInner: function(n) {
            /**
             * @param e
             */
            return m(n) ? this.each(function(e) {
                S(this)
                    .wrapInner(n.call(this, e))
                /**
                 * a / object
                 */
            }) : this.each(function() {
                var e = S(this),
                    t = e.contents();
                t.length ? t.wrapAll(n) : e.append(n)
            })
        },
        /**
         * Executes the provided function once for each element in the collection.
         * 
         * @param t - The function to be executed.
         * 
         * @return { Collection } The collection with the results of the function
         */
        wrap: function(t) {
            var n = m(t);
            /**
             * @param e
             */
            return this.each(function(e) {
                S(this)
                    .wrapAll(n ? t.call(this, e) : t)
            })
        },
        /**
         * Replace all elements that aren't part of the body with this element
         * 
         * @param e - The element to match.
         * 
         * @return { Element } The element
         */
        unwrap: function(e) {
            /**
             * / / object
             */
            return this.parent(e)
                .not("body")
                .each(function() {
                    S(this)
                        .replaceWith(this.childNodes)
                }), this
        }
        /**
         * @param e
         * 
         * @return { boolean } True if the event is visible
         */
    }), S.expr.pseudos.hidden = function(e) {
        return !S.expr.pseudos.visible(e)
        /**
         * @param e
         * 
         * @return True if the element has any width or height
         */
    }, S.expr.pseudos.visible = function(e) {
        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects()
            .length)
        /**
         * @return { Object } XMLHttpRequest or
         */
    }, S.ajaxSettings.xhr = function() {
        try {
            return new C.XMLHttpRequest
        } catch (e) {}
    };
    var Bt = {
            0: 200,
            1223: 204
        },
        $t = S.ajaxSettings.xhr();
    /**
     * Returns an object that encapsulates the XHR functionality.
     * 
     * @param i - Options to be passed to the function. This is a map of properties to be used in the cross domain request.
     * 
     * @return { Object } An object that encapsulates the XHR functionality
     */
    y.cors = !!$t && "withCredentials" in $t, y.ajax = $t = !!$t, S.ajaxTransport(function(i) {
        var o, a;
        if (y.cors || $t && !i.crossDomain) return {
            /**
             * Returns a function that when called will open a XHR connection to the URL specified in the URL parameter.
             * 
             * @param e - HTTP error response to be sent to the server.
             * @param t - Callback to invoke with the return value of the XHR.
             * 
             * @return { Function } A function that when called will open a XHR connection
             */
            send: function(e, t) {
                var n, r = i.xhr();
                if (r.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields)
                    for (n in i.xhrFields) r[n] = i.xhrFields[n];
                for (n in i.mimeType && r.overrideMimeType && r.overrideMimeType(i.mimeType), i.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest"), e) r.setRequestHeader(n, e[n]);
                /**
                 * Returns a function for handling errors.
                 * 
                 * @param e - The error to pass to the error handler.
                 */
                o = function(e) {
                    /**
                     * a / object
                     */
                    return function() {
                        o && (o = a = r.onload = r.onerror = r.onabort = r.ontimeout = r.onreadystatechange = null, "abort" === e ? r.abort() : "error" === e ? "number" != typeof r.status ? t(0, "error") : t(r.status, r.statusText) : t(Bt[r.status] || r.status, r.statusText, "text" !== (r.responseType || "text") || "string" != typeof r.responseText ? {
                            binary: r.response
                        } : {
                            text: r.responseText
                        }, r.getAllResponseHeaders()))
                    }
                    /**
                     * then the data is loaded
                     */
                }, r.onload = o(), a = r.onerror = r.ontimeout = o("error"), void 0 !== r.onabort ? r.onabort = a : r.onreadystatechange = function() {
                    /**
                     * / / object
                     */
                    4 === r.readyState && C.setTimeout(function() {
                        o && a()
                    })
                }, o = o("abort");
                try {
                    r.send(i.hasContent && i.data || null)
                } catch (e) {
                    if (o) throw e
                }
            },
            /**
             * / / object
             */
            abort: function() {
                o && o()
            }
        }
        /**
         * @param e
         */
    }), S.ajaxPrefilter(function(e) {
        e.crossDomain && (e.contents.script = !1)
    }), S.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            /**
             * @param e
             * 
             * @return { Object } The result of eval
             */
            "text script": function(e) {
                return S.globalEval(e), e
            }
        }
        /**
         * @param e
         */
    }), S.ajaxPrefilter("script", function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET")
        /**
         * Returns an object that encapsulates the send and abort methods for a request.
         * 
         * @param n - Options to use when creating the request.
         * 
         * @return { Object } An object that encapsulates the send and abort methods for a request
         */
    }), S.ajaxTransport("script", function(n) {
        var r, i;
        if (n.crossDomain || n.scriptAttrs) return {
            /**
             * Load script and return error if any
             * 
             * @param e - Error or null to use default
             * @param t - Callback for error ( 404|200
             */
            send: function(e, t) {
                r = S("<script>")
                    .attr(n.scriptAttrs || {})
                    .prop({
                        charset: n.scriptCharset,
                        src: n.url
                        /**
                         * @param e
                         */
                    })
                    .on("load error", i = function(e) {
                        r.remove(), i = null, e && t("error" === e.type ? 404 : 200, e.type)
                    }), E.head.appendChild(r[0])
            },
            /**
             * / / object
             */
            abort: function() {
                i && i()
            }
        }
    });
    var _t, zt = [],
        Ut = /(=)\?(?=&|$)|\?\?/;
    S.ajaxSetup({
        jsonp: "callback",
        /**
         * @return { String } Unique identifier
         */
        jsonpCallback: function() {
            var e = zt.pop() || S.expando + "_" + wt.guid++;
            return this[e] = !0, e
        }
        /**
         * Adds converters to JSON / JSONP conversion.
         * 
         * @param e - Event object to modify.
         * @param t - String used to identify type of conversion.
         * @param n - String used to identify type of conversion.
         * 
         * @return { Object } Returns e
         */
    }), S.ajaxPrefilter("json jsonp", function(e, t, n) {
        var r, i, o, a = !1 !== e.jsonp && (Ut.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "")
            .indexOf("application/x-www-form-urlencoded") && Ut.test(e.data) && "data");
        /**
         * @return { Promise } A Promise that resolves to the result of the function
         */
        if (a || "jsonp" === e.dataTypes[0]) return r = e.jsonpCallback = m(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, a ? e[a] = e[a].replace(Ut, "$1" + r) : !1 !== e.jsonp && (e.url += (Tt.test(e.url) ? "&" : "?") + e.jsonp + "=" + r), e.converters["script json"] = function() {
            return o || S.error(r + " was not called"), o[0]
            /**
             * / / object
             */
        }, e.dataTypes[0] = "json", i = C[r], C[r] = function() {
            o = arguments
            /**
             * a / object
             */
        }, n.always(function() {
            void 0 === i ? S(C)
                .removeProp(r) : C[r] = i, e[r] && (e.jsonpCallback = t.jsonpCallback, zt.push(r)), o && m(i) && i(o[0]), o = i = void 0
        }), "script"
        /**
         * @param e - t Th document to append the element to.
         * @param t - n If rue the element will be appended to the document instead of created.
         * @param n
         * 
         * @return The array of created elements
         */
    }), y.createHTMLDocument = ((_t = E.implementation.createHTMLDocument("")
            .body)
        .innerHTML = "<form></form><form></form>", 2 === _t.childNodes.length), S.parseHTML = function(e, t, n) {
        return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t, t = !1), t || (y.createHTMLDocument ? ((r = (t = E.implementation.createHTMLDocument(""))
                .createElement("base"))
            .href = E.location.href, t.head.appendChild(r)) : t = E), o = !n && [], (i = N.exec(e)) ? [t.createElement(i[1])] : (i = xe([e], t, o), o && o.length && S(o)
            .remove(), S.merge([], i.childNodes)));
        var r, i, o
        /**
         * Executes an AJAX request and returns a promise that will resolve to the response.
         * 
         * @param e - The URL to send the request to.
         * @param t - The data to send in the request.
         * @param n - An optional callback to be called after the request is complete.
         * 
         * @return { Boolean } True if the request was successful
         */
    }, S.fn.load = function(e, t, n) {
        var r, i, o, a = this,
            s = e.indexOf(" ");
        return -1 < s && (r = ht(e.slice(s)), e = e.slice(0, s)), m(t) ? (n = t, t = void 0) : t && "object" == typeof t && (i = "POST"), 0 < a.length && S.ajax({
                url: e,
                type: i || "GET",
                dataType: "html",
                data: t
                /**
                 * @param e
                 */
            })
            .done(function(e) {
                o = arguments, a.html(r ? S("<div>")
                    .append(S.parseHTML(e))
                    .find(r) : e)
                /**
                 * Called after the response has been received.
                 * 
                 * @param e - The response to be processed.
                 * @param t - The callback to be invoked
                 */
            })
            .always(n && function(e, t) {
                /**
                 * / / object
                 */
                a.each(function() {
                    n.apply(this, o || [e.responseText, t, e])
                })
            }), this
        /**
         * Returns the number of timers associated with the given element
         * 
         * @param t - The element to search for
         * 
         * @return { Number } The number of timers
         */
    }, S.expr.pseudos.animated = function(t) {
        /**
         * @param e
         * 
         * @return True if the element is the same as t
         */
        return S.grep(S.timers, function(e) {
                return t === e.elem
            })
            .length
    }, S.offset = {
        /**
         * @param e - t Objct with methods to apply to the element
         * @param t - n Opional arguments to pass to the
         * @param n
         */
        setOffset: function(e, t, n) {
            var r, i, o, a, s, u, l = S.css(e, "position"),
                c = S(e),
                f = {};
            "static" === l && (e.style.position = "relative"), s = c.offset(), o = S.css(e, "top"), u = S.css(e, "left"), ("absolute" === l || "fixed" === l) && -1 < (o + u)
                .indexOf("auto") ? (a = (r = c.position())
                    .top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), m(t) && (t = t.call(e, n, S.extend({}, s))), null != t.top && (f.top = t.top - s.top + a), null != t.left && (f.left = t.left - s.left + i), "using" in t ? t.using.call(e, f) : c.css(f)
        }
    }, S.fn.extend({
        /**
         * ( Optional ) If provided sets the offset of this ScrollRect to the specified value.
         * 
         * @param t - The value to set the offset to.
         * 
         * @return { ScrollRect|BSBOffset } The scroll rect
         */
        offset: function(t) {
            /**
             * @param e
             */
            if (arguments.length) return void 0 === t ? this : this.each(function(e) {
                S.offset.setOffset(this, t, e)
            });
            var e, n, r = this[0];
            return r ? r.getClientRects()
                .length ? (e = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {
                    top: e.top + n.pageYOffset,
                    left: e.left + n.pageXOffset
                }) : {
                    top: 0,
                    left: 0
                } : void 0
        },
        /**
         * @return number left : number }
         */
        position: function() {
            if (this[0]) {
                var e, t, n, r = this[0],
                    i = {
                        top: 0,
                        left: 0
                    };
                if ("fixed" === S.css(r, "position")) t = r.getBoundingClientRect();
                else {
                    t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;
                    while (e && (e === n.body || e === n.documentElement) && "static" === S.css(e, "position")) e = e.parentNode;
                    e && e !== r && 1 === e.nodeType && ((i = S(e)
                            .offset())
                        .top += S.css(e, "borderTopWidth", !0), i.left += S.css(e, "borderLeftWidth", !0))
                }
                return {
                    top: t.top - i.top - S.css(r, "marginTop", !0),
                    left: t.left - i.left - S.css(r, "marginLeft", !0)
                }
            }
        },
        /**
         * Returns an array of elements that are positioned in the same order as they appeared.
         * 
         * 
         * @return { Array } An array of elements
         */
        offsetParent: function() {
            /**
             * @return { Element } The element that this element is positioned at
             */
            return this.map(function() {
                var e = this.offsetParent;
                while (e && "static" === S.css(e, "position")) e = e.offsetParent;
                return e || re
            })
        }
    }), S.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
        /**
         * Sets the value of $. fn [ t ] to the value of the element specified by i.
         * 
         * @param t - The name of the event property to set.
         * @param i - The name of the property to get.
         * 
         * @return The value of $. fn
         */
    }, function(t, i) {
        var o = "pageYOffset" === i;
        /**
         * Sets or gets the value of an element's property.
         * 
         * @param e - The element to set or get the property from.
         */
        S.fn[t] = function(e) {
            /**
             * @param e - t Th name of the property to get ( set if undefined ).
             * @param t - n The value o set the property to.
             * @param n
             * 
             * @return The value of the property
             */
            return $(this, function(e, t, n) {
                var r;
                if (x(e) ? r = e : 9 === e.nodeType && (r = e.defaultView), void 0 === n) return r ? r[i] : e[t];
                r ? r.scrollTo(o ? r.pageXOffset : n, o ? n : r.pageYOffset) : e[t] = n
            }, t, e, arguments.length)
        }
        /**
         * Sets the value of a CSS property to the value of the document's pixel - position.
         * 
         * @param e - The document to set the property on.
         * @param n - The name of the property to set.
         * 
         * @return The value of the property
         */
    }), S.each(["top", "left"], function(e, n) {
        /**
         * @param e - t Th value to set.
         * @param t
         * 
         * @return The value to set or null
         */
        S.cssHooks[n] = Fe(y.pixelPosition, function(e, t) {
            if (t) return t = We(e, n), Pe.test(t) ? S(e)
                .position()[n] + "px" : t
        })
    }), S.each({
        Height: "height",
        Width: "width"
        /**
         * Adds padding content and / or border attributes to an element
         * 
         * @param a - The padding attribute to use
         * @param s - The content to set the padding attribute to
         * 
         * @return { Object } The element
         */
    }, function(a, s) {
        S.each({
            padding: "inner" + a,
            content: s,
            "": "outer" + a
            /**
             * Sets or gets the margin or border of an element.
             * 
             * @param r - If provided sets the margin or border of the element.
             * @param o - The name of the property to set or get.
             * 
             * @return { Element } The element
             */
        }, function(r, o) {
            /**
             * Set or retrieve this node's CSS margin or border.
             * 
             * @param e - If provided this will be used as the margin or border of the node. If not provided this will be the document's body.
             * @param t - The CSS margin or border to set or null to return the current value.
             * 
             * @return The element's CSS
             */
            S.fn[o] = function(e, t) {
                var n = arguments.length && (r || "boolean" != typeof e),
                    i = r || (!0 === e || !0 === t ? "margin" : "border");
                /**
                 * @param e - t Th name of the style to set.
                 * @param t - n The value of he style to set.
                 * @param n
                 * 
                 * @return The value of the style
                 */
                return $(this, function(e, t, n) {
                    var r;
                    return x(e) ? 0 === o.indexOf("outer") ? e["inner" + a] : e.document.documentElement["client" + a] : 9 === e.nodeType ? (r = e.documentElement, Math.max(e.body["scroll" + a], r["scroll" + a], e.body["offset" + a], r["offset" + a], r["client" + a])) : void 0 === n ? S.css(e, t, i) : S.style(e, t, n, i)
                }, s, n ? e : void 0, n)
            }
        })
        /**
         * Adds a listener to the event.
         * 
         * @param e - The event to listen for.
         * @param t - The name of the listener.
         * 
         * @return { Object } The instance
         */
    }), S.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(e, t) {
        /**
         * @param e
         * 
         * @return Promise that will be resolved when the event has been received
         */
        S.fn[t] = function(e) {
            return this.on(t, e)
        }
    }), S.fn.extend({
        /**
         * @param e - t Callback that will b invoked when events arrive.
         * @param t - n Opional timeout in milliseconds.
         * @param n
         * 
         * @return Promise that will be resolved when events arrive
         */
        bind: function(e, t, n) {
            return this.on(e, null, t, n)
        },
        /**
         * @param e - t Callback to fir when listeners are removed.
         * @param t
         * 
         * @return A promise that will be resolved when listeners are removed
         */
        unbind: function(e, t) {
            return this.off(e, null, t)
        },
        /**
         * @param e - t Th eventTarget that will receive the event.
         * @param t - n The key for he EventTarget.
         * @param n - r The value for the EvetTarget.
         * @param r
         * 
         * @return { Boolean } True if the event was handled
         */
        delegate: function(e, t, n, r) {
            return this.on(t, e, n, r)
        },
        /**
         * @param e - t Evnt name to remove.
         * @param t - n Even name to remove.
         * @param n
         * 
         * @return { String } Remove request
         */
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n)
        },
        /**
         * @param e - t Th target for the mouse event.
         * @param t
         * 
         * @return { Object } The event data
         */
        hover: function(e, t) {
            return this.mouseenter(e)
                .mouseleave(t || e)
        }
        /**
         * ( C ) 2014 John Resig
         * 
         * @param e - Event name to trigger.
         * @param n - Event name to be bound.
         * 
         * @return Return value of on ()
         */
    }), S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(e, n) {
        /**
         * @param e - t Optional callback that will b invoked when event is triggered.
         * @param t
         * 
         * @return { Function } The event
         */
        S.fn[n] = function(e, t) {
            return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n)
        }
    });
    var Xt = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    /**
     * Creates a new function that calls the given function with the given arguments.
     * 
     * @param e - The function to wrap.
     * @param t - The name of the function to call.
     * 
     * @return { Function } The wrapped function
     */
    S.proxy = function(e, t) {
        var n, r, i;
        /**
         * @return { * } The result of applying the function
         */
        if ("string" == typeof t && (n = e[t], t = e, e = n), m(e)) return r = s.call(arguments, 2), (i = function() {
                return e.apply(t || this, r.concat(s.call(arguments)))
            })
            .guid = e.guid = e.guid || S.guid++, i
        /**
         * @param e
         */
    }, S.holdReady = function(e) {
        e ? S.readyWait++ : S.ready(!0)
        /**
         * @param e
         * 
         * @return { boolean } True if the value is a number
         */
    }, S.isArray = Array.isArray, S.parseJSON = JSON.parse, S.nodeName = A, S.isFunction = m, S.isWindow = x, S.camelCase = X, S.type = w, S.now = Date.now, S.isNumeric = function(e) {
        var t = S.type(e);
        return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e))
        /**
         * @param e
         * 
         * @return { String } The formatted value
         */
    }, S.trim = function(e) {
        return null == e ? "" : (e + "")
            .replace(Xt, "")
        /**
         * @return { string } the string
         */
    }, "function" == typeof define && define.amd && define("jquery", [], function() {
        return S
    });
    var Vt = C.jQuery,
        Gt = C.$;
    /**
     * @param e
     * 
     * @return { Boolean } True if both versions of jQuery are available
     */
    return S.noConflict = function(e) {
        return C.$ === S && (C.$ = Gt), e && C.jQuery === S && (C.jQuery = Vt), S
    }, "undefined" == typeof e && (C.jQuery = C.$ = S), S
});