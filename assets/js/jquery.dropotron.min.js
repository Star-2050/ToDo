// Definition des jQuery-Plugins "disableSelection_dropotron"
(function ($) {
    $.fn.disableSelection_dropotron = function () {
        return $(this).css("user-select", "none")
            .css("-khtml-user-select", "none")
            .css("-moz-user-select", "none")
            .css("-o-user-select", "none")
            .css("-webkit-user-select", "none");
    };

    // Definition des jQuery-Plugins "dropotron"
    $.fn.dropotron = function (options) {
        if (this.length === 0) return $(this);
        if (this.length > 1) {
            for (var i = 0; i < this.length; i++) {
                $(this[i]).dropotron(options);
            }
            return $(this);
        }

        // Erweiterung des jQuery-Objekts um die dropotron-Funktionalität
        return $.dropotron($.extend({ selectorParent: $(this) }, options));
    };

    // Hauptdefinition des "dropotron"-Plugins
    $.dropotron = function (options) {
        var defaults = {
            selectorParent: null,
            baseZIndex: 1000,
            menuClass: "dropotron",
            expandMode: "hover",
            hoverDelay: 150,
            hideDelay: 250,
            openerClass: "opener",
            openerActiveClass: "active",
            submenuClassPrefix: "level-",
            mode: "fade",
            speed: "fast",
            easing: "swing",
            alignment: "left",
            offsetX: 0,
            offsetY: 0,
            globalOffsetY: 0,
            IEOffsetX: 0,
            IEOffsetY: 0,
            noOpenerFade: true,
            detach: true,
            cloneOnDetach: true
        };

        var options = $.extend(defaults, options),
            selectorParent = options.selectorParent,
            menus = selectorParent.find("ul"),
            body = $("body"),
            htmlBody = $("body,html"),
            windowElement = $(window),
            isAnimating = false,
            collapseTimeout = null,
            expandTimeout = null,
            opener = null,
            activeMenu = null;

        // Event, um alle Menüs zu schließen
        selectorParent.on("doCollapseAll", function () {
            menus.trigger("doCollapse");
        });

        // Iteriere durch alle Menüs
        menus.each(function () {
            var menu = $(this),
                parent = menu.parent();

            // Event-Handler für das Schließen des Menüs bei Verlassen
            if (options.hideDelay > 0) {
                menu.add(parent).on("mouseleave", function (event) {
                    window.clearTimeout(collapseTimeout);
                    collapseTimeout = window.setTimeout(function () {
                        menu.trigger("doCollapse");
                    }, options.hideDelay);
                });
            }

            // Deaktiviere Auswahl und verstecke das Menü
            menu.disableSelection_dropotron().hide().addClass(options.menuClass).css("position", "absolute")
                .on("mouseenter", function (event) {
                    window.clearTimeout(collapseTimeout);
                })
                .on("doExpand", function () {
                    if (menu.is(":visible")) return false;

                    window.clearTimeout(collapseTimeout);

                    // Schließe alle anderen Menüs
                    menus.each(function () {
                        var currentMenu = $(this);
                        if (!currentMenu.is(":visible") || currentMenu.is(menu)) return;
                        currentMenu.trigger("doCollapse");
                    });

                    var top, left, opacity, menuOffset, alignment, menuWidth, openerWidth;

                    // Berechne die Position des Menüs
                    var parentOffset = parent.offset(),
                        parentPosition = parent.position(),
                        parentOuterWidth = parent.outerWidth(),
                        menuOuterWidth = menu.outerWidth(),
                        isOpenerActive = parent.css("z-index") == options.baseZIndex;

                    if (isOpenerActive) {
                        switch (options.alignment) {
                            case "right":
                                left = parentOffset.left - menuOuterWidth + parentOuterWidth + options.offsetX;
                                if (left < 0) {
                                    left = parentOffset.left;
                                    alignment = "left";
                                }
                                break;
                            case "center":
                                left = parentOffset.left - Math.floor((menuOuterWidth - parentOuterWidth) / 2) + options.offsetX;
                                if (left < 0) {
                                    left = parentOffset.left;
                                    alignment = "left";
                                } else if (left + menuOuterWidth > windowElement.width()) {
                                    left = parentOffset.left - menuOuterWidth + parentOuterWidth;
                                    alignment = "right";
                                }
                                break;
                            case "left":
                            default:
                                left = parentOffset.left;
                                if (left + menuOuterWidth > windowElement.width()) {
                                    left = parentOffset.left - menuOuterWidth + parentOuterWidth;
                                    alignment = "right";
                                }
                        }
                        menu.addClass(alignment);
                    } else {
                        switch (parent.css("position")) {
                            case "relative":
                            case "absolute":
                                menuOffset = -1 * parentPosition.left;
                                break;
                            default:
                                menuOffset = 0;
                        }

                        switch (options.alignment) {
                            case "right":
                                left = menuOffset + options.offsetX;
                                break;
                            case "center":
                            case "left":
                            default:
                                left = menuOffset + parentOuterWidth + options.offsetX;
                        }
                    }

                    if (navigator.userAgent.match(/MSIE ([0-9]+)\./) && RegExp.$1 < 8) {
                        left += options.IEOffsetX;
                        menuOffset += options.IEOffsetY;
                    }

                    menu.css("left", left + "px")
                        .css("top", menuOffset + options.offsetY + "px")
                        .css("opacity", "0.01")
                        .show();

                    // Spezielle Behandlung für Mac, wenn er als iOS erkannt wird
                    if (options.alignment == "left" && isOpenerActive && "ontouchstart" in window &&
                        (screen.width === 1024 && screen.height === 1366 ||
                            screen.width === 834 && screen.height === 1112 ||
                            screen.width === 810 && screen.height === 1080 ||
                            screen.width === 768 && screen.height === 1024)) {
                        alignment = "right";
                        menu.css("left", (left - menuOuterWidth + parentOuterWidth) + "px");
                        menu.removeClass("left").addClass(alignment);
                    }

                    menuWidth = menu.outerWidth();
                    openerWidth = parent.outerWidth();

                    var isMenuOutsideWindow = false;

                    if (menu.offset().left < 0) {
                        left = menuOffset + parentOuterWidth - options.offsetX;
                        isMenuOutsideWindow = true;
                    } else if (menu.offset().left + menuWidth > windowElement.width()) {
                        left = menuOffset - parentOuterWidth - options.offsetX;
                        isMenuOutsideWindow = true;
                    }

                    if (isMenuOutsideWindow) {
                        menu.css("left", left + "px");
                    }

                    menu.hide().css("opacity", "1");

                    // Animationsmodus abhängig von den Optionen
                    switch (options.mode) {
                        case "zoom":
                            isAnimating = true;
                            parent.addClass(options.openerActiveClass);
                            menu.animate({ width: "toggle", height: "toggle" }, options.speed, options.easing, function () {
                                isAnimating = false;
                            });
                            break;
                        case "slide":
                            isAnimating = true;
                            parent.addClass(options.openerActiveClass);
                            menu.animate({ height: "toggle" }, options.speed, options.easing, function () {
                                isAnimating = false;
                            });
                            break;
                        case "fade":
                            if (isAnimating = true, isOpenerActive && !options.noOpenerFade) {
                                var fadeInSpeed;
                                fadeInSpeed = options.speed == "slow" ? 80 : options.speed == "fast" ? 40 : Math.floor(options.speed / 2);
                                parent.fadeTo(fadeInSpeed, 0.01, function () {
                                    parent.addClass(options.openerActiveClass);
                                    parent.fadeTo(options.speed, 1);
                                    menu.fadeIn(options.speed, function () {
                                        isAnimating = false;
                                    });
                                });
                            } else {
                                parent.addClass(options.openerActiveClass);
                                parent.fadeTo(options.speed, 1);
                                menu.fadeIn(options.speed, function () {
                                    isAnimating = false;
                                });
                            }
                            break;
                        case "instant":
                        default:
                            parent.addClass(options.openerActiveClass);
                            menu.show();
                    }

                    return false;
                })
                .on("doCollapse", function () {
                    if (menu.is(":visible")) {
                        menu.hide();
                        parent.removeClass(options.openerActiveClass);
                        menu.find("." + options.openerActiveClass).removeClass(options.openerActiveClass);
                        menu.find("ul").hide();
                        return false;
                    }
                    return false;
                })
                .on("doToggle", function (event) {
                    return menu.is(":visible") ? menu.trigger("doCollapse") : menu.trigger("doExpand"), false;
                });

            // Deaktiviere Auswahl und setze den Cursor für den Opener
            parent.disableSelection_dropotron().addClass("opener").css("cursor", "pointer")
                .on("click touchend", function (event) {
                    if (!isAnimating) {
                        event.preventDefault();
                        event.stopPropagation();
                        menu.trigger("doToggle");
                    }
                });

            // Für "hover"-Modus: zeige das Menü bei Hover-Ereignissen
            if (options.expandMode == "hover") {
                parent.hover(
                    function (event) {
                        if (!isAnimating) {
                            expandTimeout = window.setTimeout(function () {
                                menu.trigger("doExpand");
                            }, options.hoverDelay);
                        }
                    },
                    function (event) {
                        window.clearTimeout(expandTimeout);
                    }
                );
            }
        });

        // Stelle sicher, dass Links ohne href nicht navigieren
        menus.find("a").css("display", "block")
            .on("click touchend", function (event) {
                if (!isAnimating && $(this).attr("href").length < 1) {
                    event.preventDefault();
                }
            });

        // Behandlung von "li"-Elementen
        selectorParent.find("li").css("white-space", "nowrap")
            .each(function () {
                var listItem = $(this),
                    anchor = listItem.children("a"),
                    submenu = listItem.children("ul"),
                    href = anchor.attr("href");

                anchor.on("click touchend", function (event) {
                    if (isAnimating || (href.length == 0 || href == "#")) {
                        event.preventDefault();
                    }
                });

                if (anchor.length > 0 && submenu.length == 0) {
                    listItem.on("click touchend", function (event) {
                        if (!isAnimating) {
                            selectorParent.trigger("doCollapseAll");
                            event.stopPropagation();
                        }
                    });
                }
            });

        // Behandlung von "li"-Elementen der obersten Ebene
        selectorParent.children("li").each(function () {
            var listItem = $(this),
                submenu = listItem.children("ul");

            if (submenu.length > 0) {
                // Menü umpositionieren (detachieren und anhängen, wenn detach-Option aktiviert ist)
                if (options.detach) {
                    if (options.cloneOnDetach) {
                        var clonedSubmenu = submenu.clone();
                        clonedSubmenu.attr("class", "").hide().appendTo(submenu.parent());
                    }
                    submenu.detach().appendTo(htmlBody);
                }

                // Z-Index für Untermenüs festlegen
                for (var zIndex = options.baseZIndex, level = 1, currentSubmenu = submenu; currentSubmenu.length > 0; level++) {
                    currentSubmenu.css("z-index", zIndex++);
                    if (options.submenuClassPrefix) {
                        currentSubmenu.addClass(options.submenuClassPrefix + (zIndex - 1 - options.baseZIndex));
                    }
                    currentSubmenu = currentSubmenu.find("> li > ul");
                }
            }
        });

        // Schließe alle Menüs beim Scrollen
        windowElement.on("scroll", function () {
            selectorParent.trigger("doCollapseAll");
        });

        // Schließe alle Menüs beim Tastendruck auf Escape
        htmlBody.on("keypress", function (event) {
            if (!isAnimating && event.keyCode == 27) {
                event.preventDefault();
                selectorParent.trigger("doCollapseAll");
            }
        });

        // Schließe alle Menüs beim Klicken außerhalb der Menüs
        htmlBody.on("click touchend", function () {
            if (!isAnimating) {
                selectorParent.trigger("doCollapseAll");
            }
        });
    };
})(jQuery);
