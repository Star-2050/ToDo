// jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed

// Funktion, um Einheiten in Pixel umzurechnen
function convertToPixels(unit, percentOfWidth, percentOfHeight) {
    if (typeof unit === 'string') {
        if (unit.slice(-1) === '%') {
            return parseInt(unit.substring(0, unit.length - 1)) / 100 * percentOfWidth;
        } else if (unit.slice(-2) === 'vh') {
            return parseInt(unit.substring(0, unit.length - 2)) / 100 * percentOfHeight;
        } else if (unit.slice(-2) === 'px') {
            return parseInt(unit.substring(0, unit.length - 2));
        }
    }
    return unit;
}

// Hauptfunktion für das Scrollex-Plugin
(function ($) {
    var $window = $(window),
        idCounter = 1,
        scrollexObjects = {};

    // Funktion für das Scroll-Ereignis
    $window.on('scroll', function () {
        var scrollTop = $window.scrollTop();

        // Iteriere über alle Scrollex-Objekte und führe die Handler-Funktionen aus
        $.map(scrollexObjects, function (scrollexObj) {
            window.clearTimeout(scrollexObj.timeoutId);

            // Verzögere die Ausführung der Handler-Funktion
            scrollexObj.timeoutId = window.setTimeout(function () {
                scrollexObj.handler(scrollTop);
            }, scrollexObj.options.delay);
        });
    }).on('load', function () {
        $window.trigger('scroll');
    });

    // jQuery-Plugin-Funktion für Scrollex
    $.fn.scrollex = function (options) {
        var $element = $(this);

        // Überprüfe, ob das Element bereits ein Scrollex-Objekt hat
        if ($element.data('_scrollexId')) {
            return $element;
        }

        var id = idCounter++,
            defaults = {
                top: 0,
                bottom: 0,
                delay: 0,
                mode: 'default',
                enter: null,
                leave: null,
                initialize: null,
                terminate: null,
                scroll: null
            },
            settings = $.extend({}, defaults, options),
            testFunction;

        // Funktion zum Testen des Scroll-Bereichs
        switch (settings.mode) {
            case 'top':
                testFunction = function (scrollTop, elementTop, elementBottom, rangeTop, rangeBottom) {
                    return scrollTop >= rangeTop && rangeBottom >= scrollTop;
                };
                break;
            case 'bottom':
                testFunction = function (scrollTop, elementTop, elementBottom, rangeTop, rangeBottom) {
                    return rangeBottom >= elementTop && elementBottom >= rangeBottom;
                };
                break;
            case 'middle':
                testFunction = function (scrollTop, elementTop, elementBottom, rangeTop, rangeBottom) {
                    return elementBottom >= rangeTop && rangeBottom >= elementTop;
                };
                break;
            case 'top-only':
                testFunction = function (scrollTop, elementTop, elementBottom, rangeTop, rangeBottom) {
                    return rangeTop >= scrollTop && elementBottom >= rangeTop;
                };
                break;
            case 'bottom-only':
                testFunction = function (scrollTop, elementTop, elementBottom, rangeTop, rangeBottom) {
                    return rangeBottom >= scrollTop && scrollTop >= rangeTop;
                };
                break;
            default:
            case 'default':
                testFunction = function (scrollTop, elementTop, elementBottom, rangeTop, rangeBottom) {
                    return rangeBottom >= elementTop && scrollTop >= rangeTop;
                };
        }

        // Handler-Funktion für das Scrollex-Objekt
        var handlerFunction = function (scrollTop) {
            var windowHeight = $window.height(),
                rangeTop, rangeBottom, elementState, isInView;

            rangeTop = convertToPixels(settings.top, windowHeight, windowHeight);
            rangeBottom = convertToPixels(settings.bottom, windowHeight, windowHeight);

            // Teste, ob das Element im sichtbaren Bereich liegt
            isInView = testFunction(scrollTop, elementTop, elementBottom, rangeTop, rangeBottom);

            if (isInView !== elementState) {
                elementState = isInView;

                // Führe die entsprechende Handler-Funktion aus
                if (elementState) {
                    settings.enter && settings.enter.apply(this.element);
                } else {
                    settings.leave && settings.leave.apply(this.element);
                }

                // Führe die Scroll-Handler-Funktion aus
                settings.scroll && settings.scroll.apply(this.element, [(elementTop - rangeTop) / (rangeBottom - rangeTop)]);
            }
        };

        // Scrollex-Objekt
        var scrollexObject = {
            id: id,
            options: settings,
            test: testFunction,
            handler: handlerFunction,
            state: null,
            element: this,
            $element: $element,
            timeoutId: null
        };

        // Führe die Initialisierungs-Handler-Funktion aus
        settings.initialize && settings.initialize.apply(this);

        // Speichere das Scrollex-Objekt
        scrollexObjects[id] = scrollexObject;

        // Markiere das Element mit seiner Scrollex-ID
        $element.data('_scrollexId', id);

        return $element;
    };

    // jQuery-Plugin-Funktion zum Deaktivieren von Scrollex
    $.fn.unscrollex = function () {
        var $element = $(this);

        // Überprüfe, ob das Element eine Scrollex-ID hat
        if ($element.length === 0) {
            return $element;
        }

        // Falls es mehrere Elemente gibt, wende die Funktion auf jedes Element an
        if ($element.length > 1) {
            for (var i = 0; i < $element.length; i++) {
                $(this[i]).unscrollex();
            }
            return $element;
        }

        var scrollexId = $element.data('_scrollexId');

        // Falls eine Scrollex-ID vorhanden ist, entferne das Scrollex-Objekt
        if (scrollexId) {
            var scrollexObj = scrollexObjects[scrollexId];
            window.clearTimeout(scrollexObj.timeoutId);
            delete scrollexObjects[scrollexId];
            $element.removeData('_scrollexId');

            // Führe die Terminate-Handler-Funktion aus
            scrollexObj.options.terminate && scrollexObj.options.terminate.apply(this);

            return $element;
        }

        return $element;
    };
})(jQuery);
